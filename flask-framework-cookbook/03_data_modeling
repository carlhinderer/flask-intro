-----------------------------------------------------------------------
|  CHAPTER 3 - DATA MODELING IN FLASK                                 |
-----------------------------------------------------------------------

- Creating a SQLAlchemy DB instance

    - First, we need to install the SQLAlchemy interface for Flask.

        $ pip install flask-sqlalchemy


    - Then, we need to add a connection string for the database we want to use.

        # Tell SQLAlchemy the location of the dataase
        app.config['SQLALCHEMY_DATABASE_URI'] = os.environ('DATABASE_URI') 

        # SQLite connection string template
        sqlite:////tmp/test.db 

        # Postgres connection string template
        postgresql://yourusername:yourpassword@localhost/yournewdb. 


    - We configure our settings and create the database object.

        # flask_app/my_app/__init__.py
        -------------------------------------------
        from flask import Flask 
        from flask_sqlalchemy import SQLAlchemy 
         
        app = Flask(__name__) 
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' 
        db = SQLAlchemy(app)



- Creating a basic product model

    - Our new application's directory structure will look like:

        flask_catalog/ 
            - run.py
            my_app/ 
                - __init__.py 
                catalog/ 
                    - __init__.py 
                    - views.py 
                    - models.py 


    - First, we modify the application configuration file to add the SQLite connection string
        and register the blueprint for the catalog.  Then, we create the tables if they don't
        already exist.

        # flask_catalog/my_app/__init__.py
        -------------------------------------------
        from flask import Flask 
        from flask_sqlalchemy import SQLAlchemy 
         
        app = Flask(__name__) 
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' 
        db = SQLAlchemy(app) 
         
        from my_app.catalog.views import catalog 
        app.register_blueprint(catalog) 
         
        db.create_all()


    - Now, we create the Product model.

        # flask_catalog/my_app/catalog/models.py
        -------------------------------------------
        from my_app import db 
 
        class Product(db.Model): 
            id = db.Column(db.Integer, primary_key=True) 
            name = db.Column(db.String(255)) 
            price = db.Column(db.Float) 
         
            def __init__(self, name, price): 
                self.name = name 
                self.price = price 
         
            def __repr__(self): 
                return '<Product %d>' % self.id


    - Finally, we'll add the views.

        # flask_catalog/my_app/catalog/views.py
        -------------------------------------------
        from flask import request, jsonify, Blueprint 
        from my_app import db 
        from my_app.catalog.models import Product 
         
        catalog = Blueprint('catalog', __name__) 
         
        @catalog.route('/') 
        @catalog.route('/home') 
        def home(): 
            return "Welcome to the Catalog Home."

        @catalog.route('/product/<id>') 
        def product(id): 
            product = Product.query.get_or_404(id) 
            return 'Product - %s, $%s' % (product.name, product.price)

        @catalog.route('/products') 
        def products(): 
            products = Product.query.all() 
            res = {} 
            for product in products: 
                res[product.id] = { 
                    'name': product.name, 
                    'price': str(product.price) 
                } 
            return jsonify(res)

        @catalog.route('/product-create', methods=['POST',]) 
        def create_product(): 
            name = request.form.get('name') 
            price = request.form.get('price') 
            product = Product(name, price) 
            db.session.add(product) 
            db.session.commit() 
            return 'Product created.'


    - Now, we can test it.

        # Install requests module
        $ pip install requests

        >>> import requests
        >>> requests.post('http://127.0.0.1:5000/product-create', 
                          data={'name': 'iPhone 5S', 'price': '549.0'})



- Creating a relational category model

    - Let's say we want each product to have one category.

        # models.py
        -------------------------------------------
        class Category(db.Model): 
            id = db.Column(db.Integer, primary_key=True) 
            name = db.Column(db.String(100)) 
         
            def __init__(self, name): 
                self.name = name 
         
            def __repr__(self): 
                return '<Category %d>' % self.id


    - And we add the relationship to the Product model.

        # models.py
        -------------------------------------------
        class Product(db.Model): 
            ...
            category_id = db.Column(db.Integer, db.ForeignKey('category.id')) 
            category = db.relationship('Category', 
                                       backref=db.backref('products', lazy='dynamic')) 
         
            def __init__(self, name, price, category): 
                ... 
                self.category = category


    - Here are the view changes.

        # views.py
        -------------------------------------------
        from my_app.catalog.models import Product, Category 
 
        @catalog.route('/products') 
        def products(): 
            products = Product.query.all() 
            res = {} 
            for product in products: 
                res[product.id] = { 
                    'name': product.name, 
                    'price': product.price, 
                    'category': product.category.name 
                } 
            return jsonify(res) 

        @catalog.route('/product-create', methods=['POST',]) 
        def create_product(): 
            name = request.form.get('name') 
            price = request.form.get('price') 
            categ_name = request.form.get('category') 
            category = Category.query.filter_by(name=categ_name).first() 
            if not category: 
                category = Category(categ_name) 
            product = Product(name, price, category) 
            db.session.add(product) 
            db.session.commit() 
            return 'Product created.'


    - Finally, we'll add new view methods for creating and listing categories.

        # views.py
        -------------------------------------------
        @catalog.route('/category-create', methods=['POST',]) 
        def create_category(): 
            name = request.form.get('name') 
            category = Category(name) 
            db.session.add(category) 
            db.session.commit() 
            return 'Category created.'

        @catalog.route('/categories') 
        def categories(): 
            categories = Category.query.all() 
            res = {} 
            for category in categories: 
                res[category.id] = { 
                    'name': category.name 
                } 
                for product in category.products: 
                    res[category.id]['products'] = { 
                        'id': product.id, 
                        'name': product.name, 
                        'price': product.price 
                    } 
            return jsonify(res)



- Migrating databases using Alembic and Flask-Migrate



- Indexing model data with Redis

    - There may be features we might want to implement, but do not want persistent storage
        for them.  So, we would like to have these stored in cache-like storage for some
        time and then vanish.

      For example, we could show a list of the recently visited products to the visitors on
        the website.  Here, we'll see how Redis can be used as an effective cache to store
        non-persistent data that can be accessed at high speed.


    - First, we'll need to add Redis using the instructions here:

        https://redis.io/topics/quickstart


    - Next, we'll install the connector for Redis.

        $ pip install redis


    - And we can open a connection to Redis.

        # my_app/__init__.py
        -------------------------------------------
        from redis import Redis 
        redis = Redis()


    - We will maintain a set in Redis, which will store the products visited recently. This 
        will be populated whenever we visit a product. The entry will expire in 10 minutes.


        # my_app/views.py
        -------------------------------------------
        from my_app import redis 
 
        @catalog.route('/product/<id>') 
        def product(id): 
            product = Product.query.get_or_404(id) 
            product_key = 'product-%s' % product.id 
            redis.set(product_key, product.name) 
            redis.expire(product_key, 600) 
            return 'Product - %s, $%s' % (product.name, product.price)


    - Now, we'll look for keys that are still alive in the cache and then fetch the corresponding
        products and return them.

        from my_app import redis 
 
        @catalog.route('/product/<id>') 
        def product(id): 
            product = Product.query.get_or_404(id) 
            product_key = 'product-%s' % product.id 
            redis.set(product_key, product.name) 
            redis.expire(product_key, 600) 
            return 'Product - %s, $%s' % (product.name, product.price)


    - An entry is added to the store whenever a user visits a product, and the entry is kept there
        for 600 seconds.  If the product is visited again in the next 10 minutes, it will be reset
        to 10 minutes again.



- Opting for the NoSQL way with MongoDB