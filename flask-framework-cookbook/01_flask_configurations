-----------------------------------------------------------------------
|  CHAPTER 1 - FLASK CONFIGURATIONS                                   |
-----------------------------------------------------------------------

- Book Contents

    1. Flask Configuration

         A. Setting up environment with virtualenv
         B. Handling basic configurations
         C. Configuring using class-based settings
         D. Organizing static files
         E. Being deployment-specific with instance folders
         F. Composition of views and models
         G. Creating a modular web app with blueprints
         H. Making a Flask app installable using setuptools

    2. Templating with Jinja2

         A. Bootstrapping the recommended layout
         B. Implementing block composition and layout inheritance
         C. Creating a custom context processor
         D. Creating a custom Jinja2 filter
         E. Creating a custom macro for forms
         F. Advanced date and time formatting

    3. Data Modeling in Flask

         A. Creating a SQLAlchemy DB instance
         B. Creating a basic product model
         C. Creating a relational category model
         D. Migrating databases using Alembic and Flask-Migrate
         E. Indexing model data with Redis
         F. Opting for the NoSQL way with MongoDB

    4. Working with Views

         A. Writing function-based views and URL routes
         B. Writing class-based views
         C. Implementing URL routing and product-based pagination
         D. Rendering to templates
         E. Dealing with XHR requests
         F. Using decorators to handle requests beautifully
         G. Creating custom 404 and 500 handlers
         H. Flashing messages for better user feedback
         I. Implementing SQL-based searching

    5. Webforms with WTForms

         A. Representing SQLAlchemy model data as a form
         B. Validating fields on the server side
         C. Creating a common forms set
         D. Creating custom fields and validation
         E. Creating a custom widget
         F. Uploading files via forms
         G. Protecting applications from CSRF

    6. Authenticating in Flask

         A. Creating a simple session-based authentication
         B. Authenticating using the Flask-Login extension
         C. Using Facebook for authentication
         D. Using Google for authentication
         E. Using Twitter for authentication
         F. Authenticating with LDAP

    7. RESTful API Building

         A. Creating a class-based REST interface
         B. Creating an extension-based REST interface
         C. Creating a complete RESTful API

    8. Admin Interface for Flask Apps

         A. Creating a simple CRUD interface
         B. Using the Flask-Admin extension
         C.  Registering models with Flask-Admin
         D. Creating custom forms and actions
         E. Using a WYSIWYG editor for textarea integration
         F. Creating user roles

    9. Internationalization and Localization

         A. Adding a new language
         B. Implementing lazy evaluation and the gettext/ngettext functions
         C. Implementing the global language switching action

    10. Debugging, Error Handling, and Testing

         A. Setting up basic file logging
         B. Sending emails on the occurrence of errors
         C. Using Sentry to monitor exceptions
         D. Debugging with pdb
         E. Creating our first simple test
         F. Writing more tests for views and logic
         G. Nose library integration
         H. Using mocking to avoid real API access
         I. Determining test coverage
         J. Using profiling to find bottlenecks

    11. Deployment and Post-Deployment

         A. Deploying with Apache
         B. Deploying with uWSGI and Nginx
         C. Deploying with Gunicorn and Supervisor
         D. Deploying with Tornado
         E. Using S3 storage for file uploads
         F. Deploying with Heroku
         G. Deploying with AWS Elastic Beanstalk
         H. Managing and monitoring application performance&#xA0;with New Relic

    12. Microservices and Containers

         A. Containerization with Docker
         B. Orchestrating containers with Kubernetes
         C. Going serverless with Zappa on AWS Lambda

    13. Other Tips and Tricks

         A. Implementing full-text search with Whoosh
         B. Implementing full-text search with Elasticsearch
         C. Working with signals
         D. Using caching with your application
         E. Implementing email support for Flask applications
         F. Understanding asynchronous operations
         G. Working with Celery



- Flask Configurations

    - In the simplest possible case, we can create a minimal Flask application:

        # app.py
        from flask import Flask 
        app = Flask(__name__) 
         
        @app.route('/') 
        def hello_world(): 
            return 'Hello to the World of Flask!' 
         
        if __name__ == '__main__': 
            app.run() 


    - Now, we need to install Flask:

        $ pip install Flask


    - We can run the application:

        $ python app.py


    - Alternatively, we can define the 'FLASK_APP' environment variable and use the 
        'flask run' command.

        $ export FLASK_APP=app.py
        $ flask run



- Setting Up Environment with virtualenv

    - First, install virtualenv and create a new environment:

        $ pip install virtualenv
        $ virtualenv my_flask_env


    - Now, activate the new environment and install Flask:

        $ cd my_flask_env
        $ source bin/activate
        $ pip3 install flask


    - To make our lives easier, we can use 'virtualenvwrapper', which is a wrapper over 
        virtualenv that makes handling of multiple virtualenvs easier.

        # Deactivate the current environment so that virtualenvwrapper is installed globally
        $ deactivate

        # Now install virtualenvwrapper globally
        $ pip install virtualenvwrapper
        $ export WORKON_HOME=~/workspace
        $ source /usr/local/bin/virtualenvwrapper.sh


        # Create a virtualenv and install Flask
        $ mkvirtualenv my_flask_env
        $ pip install flask

        # Activate virtualenv with virtualenvwrapper
        $ workon my_flask_env

        # Deactivate virtualenv
        $ deactivate



- Handling Basic Configurations

    - In Flask, a configuration is done on an attribute named 'config' of the 'Flask' object.
        The 'config' attribute is a subclass of a dictionary.


    - For instance, to run our application in debug mode:

        app = Flask(__name__)
        app.config['DEBUG'] = True

      In newer versions of Flask, we can also set an environment variable, 'export FLASK_DEBUG=1'
        and then run the application using 'flask run'.  Enabling this mode causes the server
        to reload itself upon code changes and enables the Werkzeug debugger.


    - As the application grows larger, there is a need to manage the application's configuration
        in separate files.  There are a few ways to do this:

        # From a .cfg Python config file
        app.config.from_pyfile('myconfig.cfg')

        # From an object
        app.config.from_objecct('myapp.default_settings')

        # Load from the same file in which the app is run
        app.config.from_object(__name__)

        # From an environment variable
        app.config.from_envvar('PATH_TO_CONFIG_FILE')



- Configuring Using Class-Based Settings

    - An interesting way of laying out configurations for different modes can be done using
        classes and inheritance.  

        class BaseConfig(object): 
            SECRET_KEY = 'A random secret key' 
            DEBUG = True 
            TESTING = False 
            NEW_CONFIG_VARIABLE = 'my value' 
         
        class ProductionConfig(BaseConfig): 
            DEBUG = False 
            SECRET_KEY = open('/path/to/secret/file').read() 
         
        class StagingConfig(BaseConfig): 
            DEBUG = True 
         
        class DevelopmentConfig(BaseConfig): 
            DEBUG = True 
            TESTING = True 
            SECRET_KEY = 'Another random secret key'


    - Note that we can use any of the classes using the 'from_object()' method.

        app.config.from_object('configuration.DevelopmentConfig')



- Organizing Static Files

    - Flask recommends a specific way of organizing static files:

        my_app/ 
            - app.py 
            - config.py 
            - __init__.py 
            - static/ 
               - css/ 
                - js/ 
                - images/ 
                    - logo.png 


    - To render these in a template:

        <img src='/static/images/logo.png'>


    - We can also define a different default folder to look for static assets in.

        app = Flask(__name__, static_folder='/path/to/static/folder')


    - To maintain flexibility, it is a good idea to use 'url_for' instaed of explicitly
        defining routes to static assets.

        <img src="{{ url_for('static', filename='logo.png') }}">



- Being Deployment-Specific with Instance Folders

    - Flask provides instance folders for yet another method for configuration.  While
        config files can provide an environment-specific set of configurations, instance
        folders allow us to have environment-specific database files, session files, cache
        files, etc.


    - By default, the instance folder is picked up automatically if we have a folder named
        'instance' at the application level.

        my_app/ 
            - app.py 
            - instance/ 
                - config.cfg 


    - If we want to use a different location, we can define an explicit path instead.

        # Define explicit path for instance folder
        app = Flask( 
            __name__, instance_path='/absolute/path/to/instance/folder' 
        )

        # Load the config file from the instance folder
        app = Flask(__name__, instance_relative_config=True)


    - Here is how this will work together:

        app = Flask( 
            __name__, instance_path='path/to/instance/folder', 
            instance_relative_config=True 
        ) 
        app.config.from_pyfile('config.cfg', silent=True)



- Composition of Views and Models

    - For an example of adding more structure to our applications, we'll use this:

        flask_app/ 
            - run.py 
            - my_app/ 
                - __init__.py 
                - hello/ 
                    - __init__.py 
                    - models.py 
                    - views.py


        # run.py
        -------------------------------------------
        from my_app import app 
        app.run(debug=True)


        # my_app/__init__.py
        -------------------------------------------
        from flask import Flask 
        app = Flask(__name__) 
        import my_app.hello.views 


        # my_app/hello/__init__.py
        -------------------------------------------
        # No content. 
        # We need this file just to make this folder a python module. 


        # my_app/hello/models.py
        -------------------------------------------
        MESSAGES = { 
            'default': 'Hello to the World of Flask!', 
        }


        # my_app/hello/views.py
        -------------------------------------------
        from my_app import app 
        from my_app.hello.models import MESSAGES 
         
        @app.route('/') 
        @app.route('/hello') 
        def hello_world(): 
            return MESSAGES['default'] 
        
        @app.route('/show/<key>') 
        def get_message(key): 
            return MESSAGES.get(key) or "%s not found!" % key 
          
        @app.route('/add/<key>/<message>') 
        def add_or_update_message(key, message): 
            MESSAGES[key] = message 
            return "%s Added/Updated" % 



    - Note that we have a circular import between 'my_app/__init__.py' and 'hello/views.py'.
        This isn't an issue, since we won't be using views in '__init__.py'. 


    - Now we can run the app:

        $ python run.py

      And view our routes in the browser:

        http://localhost:5000/show/default



- Creating a Modular Web App with Blueprints

    - A 'blueprint' is a Flask concept that helps make large applications modular.  This
        keeps application dispatching simple by providing a central place to register all
        components in an application.

      A blueprint looks like an application or a pluggable app, but it is not.  A blueprint
        is acutally a set of operations that can be registered on an application.


    - Here, we will rewrite the previous application in a way that makes it much more modular
        and extensible.


        # my_app/__init__.py
        -------------------------------------------
        from flask import Flask 
        from my_app.hello.views import hello 
         
        app = Flask(__name__) 
        app.register_blueprint(hello)


        # my_app/hello/views.py
        -------------------------------------------
        from flask import Blueprint 
        from my_app.hello.models import MESSAGES 
         
        hello = Blueprint('hello', __name__) 
        
        @hello.route('/') 
        @hello.route('/hello') 
        def hello_world(): 
            return MESSAGES['default'] 
         
        @hello.route('/show/<key>') 
        def get_message(key): 
            return MESSAGES.get(key) or "%s not found!" % key 
         
        @hello.route('/add/<key>/<message>') 
        def add_or_update_message(key, message): 
            MESSAGES[key] = message 
            return "%s Added/Updated" % key


    - Here, we eliminate the circular dependency, since we don't need to import the application
        object into the views any more.  
        


- Making a Flask App Installable Using setuptools

    - Now that we have a Flask app, how do we install it like any Python package?  It is possible
        that another application might depend on our application, so 'setuptools' can be
        used to create an installable Python package.


    - In order to make our application installable, we add a 'setup.py' file to the application's
        folder.

        # setup.py
        -------------------------------------------
        #!/usr/bin/env python 
        # -*- coding: UTF-8 -*- 
        import os 
        from setuptools import setup 
         
        setup( 
            name = 'my_app', 
            version='1.0', 
            license='GNU General Public License v3', 
            author='Shalabh Aggarwal', 
            author_email='contact@shalabhaggarwal.com', 
            description='Hello world application for Flask', 
            packages=['my_app'], 
            platforms='any', 
            install_requires=[ 
                'flask', 
            ], 
            classifiers=[ 
                'Development Status :: 4 - Beta', 
                'Environment :: Web Environment', 
                'Intended Audience :: Developers', 
                'License :: OSI Approved :: GNU General Public License v3', 
                'Operating System :: OS Independent', 
                'Programming Language :: Python', 
                'Topic :: Internet :: WWW/HTTP :: Dynamic Content', 
                'Topic :: Software Development :: Libraries :: Python Modules' 
            ], 
        )


    - The 'classifiers' section is used when the the application is made available on PyPI.


    - To run this file:

        $ python setup.py install