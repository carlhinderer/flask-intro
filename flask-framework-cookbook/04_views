-----------------------------------------------------------------------
|  CHAPTER 4 - WORKING WITH VIEWS                                     |
-----------------------------------------------------------------------

- Writing function-based views and URL routes

    - In earlier versions, Flask only had function-based views.  In later versions, 
        Flask introduced the concept of pluggable views, which allows us to have classes
        and then write methods in the classes.


    - Here is a simple function-based view.  It looks for a parameter in the query string.

        @app.route('/a-get-request') 
        def get_request(): 
            bar = request.args.get('foo', 'bar') 
            return 'A simple Flask request where foo is %s' % bar


    - Here is a simple POST request.  It looks for a parameter from the form submitted.

        @app.route('/a-post-request', methods=['POST']) 
        def post_request(): 
            bar = request.form.get('foo', 'bar') 
            return 'A simple Flask request where foo is %s' % bar


    - Here, we combine GET and POST requests into a single view function.

        @app.route('/a-request', methods=['GET', 'POST']) 
        def some_request(): 
            if request.method == 'GET': 
                bar = request.args.get('foo', 'bar') 
            else: 
                bar = request.form.get('foo', 'bar') 
            return 'A simple Flask request where foo is %s' % bar


    - Sometimes, we want to have a URL map kind of pattern, where we define all the rules
        in a single place rather than scattering them around the application.

        def get_request(): 
            bar = request.args.get('foo', 'bar') 
            return 'A simple Flask request where foo is %s' % bar 
        
        app = Flask(__name__) 
        app.add_url_rule('/a-get-request', view_func=get_request)



- Writing class-based views

    - Flask introduced the concept of pluggable views in version 0.7.  This added a lot of 
        flexibility to the existing implementation.


    - Flask provides a class named 'View', which can be inherited in order to add custom
        behavior.  Here is a simple GET request.

        from flask.views import View 
 
        class GetRequest(View): 
            def dispatch_request(self): 
                bar = request.args.get('foo', 'bar') 
                return 'A simple Flask request where foo is %s' % bar 
         
        app.add_url_rule( 
            '/a-get-request', view_func=GetRequest.as_view('get_request') 
        ) 


    - To accommodate both GET and POST requests, we can write the following code:

        from flask.views import View 
         
        class GetPostRequest(View): 
            methods = ['GET', 'POST'] 
         
            def dispatch_request(self): 
                if request.method == 'GET': 
                    bar = request.args.get('foo', 'bar') 
                if request.method == 'POST': 
                    bar = request.form.get('foo', 'bar') 
                return 'A simple Flask request where foo is %s' % bar 
         
        app.add_url_rule( 
            '/a-request', view_func=GetPostRequest.as_view('a_request') 
        )


    - There is also a way to just declare 'get' and 'post' methods inside a View class
        and let Flask handle the rest.  To do this, we use the 'MethodView'.

        from flask.views import MethodView 

        class GetPostRequest(MethodView): 
            def get(self): 
                bar = request.args.get('foo', 'bar') 
                return 'A simple Flask request where foo is %s' % bar 
         
            def post(self): 
                bar = request.form.get('foo', 'bar') 
                return 'A simple Flask request where foo is %s' % bar 
         
        app.add_url_rule( 
            '/a-request', view_func=GetPostRequest.as_view('a_request') 
        )



- Implementing URL routing

    - Let's say we this URL route.  It will return a string from the URL.

        @app.route('/test/<name>') 
        def get_name(name): 
            return name


    - To validate the length of the argument:

        @app.route('/test/<string(minlength=2,maxlength=3):code>') 
        def get_name(code): 
            return code


    - To accept an integer as an argument:

        @app.route('/test/<int:age>') 
        def get_age(age): 
            return str(age)


    - To validate the minimum and maximum accepted integer:

        @app.route('/test/<int(min=18,max=99):age>')



- Product-Based Pagination

    - Let's modify the 'products()' method to list projects to support pagination.

        @catalog.route('/products') 
        @catalog.route('/products/<int:page>') 
        def products(page=1): 
            products = Product.query.paginate(page, 10).items 
            res = {} 
            for product in products: 
                res[product.id] = { 
                    'name': product.name, 
                    'price': product.price, 
                    'category': product.category.name 
                } 
            return jsonify(res)



- Rendering to templates

    - Here, we render templates in our view method responses.

        from flask import render_template 
 
        @catalog.route('/') 
        @catalog.route('/home') 
        def home(): 
            return render_template('home.html')

        @catalog.route('/product/<id>') 
        def product(id): 
            product = Product.query.get_or_404(id) 
            return render_template('product.html', product=product)      

        @catalog.route('/products') 
        @catalog.route('/products/<int:page>') 
        def products(page=1): 
            products = Product.query.paginate(page, 10) 
            return render_template('products.html', products=products) 


    - Here are our new templates.

        # my_app/templates/home.html
        -------------------------------------------
        {% extends 'base.html' %} 
 
        {% block container %} 
          <h1>Welcome to the Catalog Home</h1> 
          <a href="{{ url_for('catalog.products') }}">Click here to see 
             the catalog</a> 
        {% endblock %}


        # my_app/templates/product.html
        -------------------------------------------
        {% extends 'home.html' %} 
 
        {% block container %} 
          <div class="top-pad"> 
            <h1>{{ product.name }}<small> {{ product.category.name 
               }}</small></h1> 
            <h3>{{ product.price }}</h3> 
          </div> 
        {% endblock %} 


        # my_app/templates/products.html
        -------------------------------------------
        {% extends 'home.html' %} 
 
        {% block container %} 
          <div class="top-pad"> 
            {% for product in products.items %} 
              <div class="well"> 
                <h2> 
                  <a href="{{ url_for('catalog.product', id=product.id) 
                     }}">{{ product.name }}</a> 
                  <small>$ {{ product.price }}</small> 
                </h2> 
              </div> 
            {% endfor %} 
            {% if products.has_prev %} 
              <a href="{{ url_for(request.endpoint, page=products.prev_num) }}"> 
                {{"<< Previous Page"}} 
              </a> 
            {% else %} 
              {{"<< Previous Page"}} 
            {% endif %} | 
            {% if products.has_next %} 
              <a href="{{ url_for(request.endpoint, page=products.next_num) }}"> 
                {{"Next page >>"}} 
              </a> 
            {% else %} 
              {{"Next page >>"}} 
            {% endif %} 
          </div> 
        {% endblock %}



- Dealing with XHR requests

    - Asynchronous XmlHttpRequests have been getting more and more prominent with the rise
        of SPA frameworks like Angular, Vue, and React.


    - The Flask 'request' object has a flag called 'is_xhr' which tells us whether the request
        made is an XHR.  If it is, the called typically expects the result in JSON.  

      For instance, if we get an XHR to the home route, we assume the client wants to reload
        the product list.

        from flask import request, render_template, jsonify 
 
        @catalog.route('/') 
        @catalog.route('/home') 
        def home(): 
            if request.is_xhr: 
                products = Product.query.all() 
                return jsonify({ 
                    'count': len(products) 
                }) 
            return render_template('home.html')


    - Next, we add a 'scripts' block to our base template.

        # my_app/templates/base.html
        -------------------------------------------
        {% block scripts %}
        {% endblock %}


    - Finally, we modify our home template, which checks whether the request is an XHR
        request.  If it is, it fetches the list of products from the database and returns
        it as a JSON object.  A badge is shown which displays the number of products in
        the database.

        # my_app/templates/home.html
        -------------------------------------------
        {% extends 'base.html' %} 
 
        {% block container %} 
          <h1>Welcome to the Catalog Home</h1> 
          <a href="{{ url_for('catalog.products') }}" id="catalog_link"> 
            Click here to see the catalog 
          </a> 
        {% endblock %} 
         
        {% block scripts %} 
        <script> 
        $(document).ready(function(){ 
          $.getJSON("/home", function(data) { 
            $('#catalog_link').append('<span class="badge">' + data.count 
               + '</span>'); 
          }); 
        }); 
        </script> 
        {% endblock %} 



- Using decorators to handle requests beautifully

    - We want to avoid having to check whether each request is an XHR, since it kills
        readability.  So, we'll create a decorator to handle it.


    - Here is our custom decorator.  It checks whether the request is xhr, and either renders
        the template or returns JSON data.


        from functools import wraps 
 
        def template_or_json(template=None): 
            """"Return a dict from your view and this will either 
            pass it to a template or render json. Use like: 
          
            @template_or_json('template.html') 
            """ 
            def decorated(f): 
                @wraps(f) 
                def decorated_fn(*args, **kwargs): 
                    ctx = f(*args, **kwargs) 
                    if request.is_xhr or not template: 
                        return jsonify(ctx) 
                    else: 
                        return render_template(template, **ctx) 
                return decorated_fn 
            return decorated


    - Now, we can rewrite our 'home()' method to use the decorator.

         @app.route('/') 
         @app.route('/home') 
         @template_or_json('home.html') 
         def home(): 
             products = Product.query.all() 
             return {'count': len(products)}



- Creating custom 404 and 500 handlers

    - To create a custom template for 404 errors:

        @app.errorhandler(404) 
        def page_not_found(e): 
            return render_template('404.html'), 404


    - And here is our template:

        # my_app/templates/404.html
        -------------------------------------------
        {% extends 'home.html' %} 
 
        {% block container %} 
          <div class="top-pad"> 
            <h3>Hola Friend! Looks like in your quest you have reached a 
               location which does not exist yet.</h3> 
            <h4>To continue, either check your map location (URL) or go 
               back <a href="{{ url_for('catalog.home') }}">home</a></h4> 
          </div> 
        {% endblock %} 



- Flashing messages for better user feedback

    - In order to use flash message capabilities, we must ensure we have a secret key
        configured for the application.  The session depends on the secret key, and the
        application will error out while flashing if it is not present.

        # my_app/__init__.py
        -------------------------------------------
        app.secret_key = 'some_random_key'


    - Now, we'll add the ability to create a product using a form.

        from flask import flash, redirect, url_for 
 
        @catalog.route('/product-create', methods=['GET', 'POST']) 
        def create_product(): 
            if request.method == 'POST': 
                name = request.form.get('name') 
                price = request.form.get('price') 
                categ_name = request.form.get('category') 
                category = Category.query.filter_by
                   (name=categ_name).first() 
                if not category: 
                    category = Category(categ_name) 
                product = Product(name, price, category) 
                db.session.add(product) 
                db.session.commit() 
                flash('The product %s has been created' % name, 'success') 
                return redirect(url_for('catalog.product', id=product.id)) 
            return render_template('product-create.html')


    - Here's the template for the form:

        # my_app/templates/product-create.html
        -------------------------------------------
        {% extends 'home.html' %} 
 
        {% block container %} 
          <div class="top-pad"> 
            <form 
                class="form-horizontal" 
                method="POST" 
                action="{{ url_for('catalog.create_product') }}" 
                role="form"> 
              <div class="form-group"> 
                <label for="name" class="col-sm-2 control-
                   label">Name</label> 
                <div class="col-sm-10"> 
                  <input type="text" class="form-control" id="name" 
                     name="name"> 
                </div> 
              </div> 
              <div class="form-group"> 
                <label for="price" class="col-sm-2 control-
                   label">Price</label> 
                <div class="col-sm-10"> 
                  <input type="number" class="form-control" id="price" 
                     name="price"> 
                </div> 
              </div> 
              <div class="form-group"> 
                <label for="category" class="col-sm-2 control-
                   label">Category</label> 
                <div class="col-sm-10"> 
                  <input type="text" class="form-control" id="category" 
                     name="category"> 
                </div> 
              </div> 
              <button type="submit" class="btn btn-
                 default">Submit</button> 
            </form> 
          </div> 
        {% endblock %} 


    - We'll also have to add the flash messages to our base template:

        # my_app/templates/base.html
        -------------------------------------------
        <br/> 
        <div> 
          {% for category, message in get_flashed_messages
             (with_categories=true) %} 
            <div class="alert alert-{{category}} alert-dismissable"> 
              <button type="button" class="close" data-dismiss="alert" 
                 aria-hidden="true">&times;</button> 
              {{ message }} 
            </div> 
          {% endfor %} 
        </div>



- Implementing SQL-based searching

    - Here, we add a method that searches our catalog by name, price, company, and category.
        We can search by one or multiple criteria (except for category, which must be by
        itself).

        # my_app/catalog/views.py
        -------------------------------------------
        from sqlalchemy.orm.util import join 
 
        @catalog.route('/product-search') 
        @catalog.route('/product-search/<int:page>') 
        def product_search(page=1): 
            name = request.args.get('name') 
            price = request.args.get('price') 
            company = request.args.get('company') 
            category = request.args.get('category') 
            products = Product.query 
            if name: 
                products = products.filter(Product.name.like('%' + name + 
                   '%')) 
            if price: 
                products = products.filter(Product.price == price) 
            if company: 
                products = products.filter(Product.company.like('%' + 
                   company + '%')) 
            if category: 
                products = products.select_from(join(Product, 
                   Category)).filter( 
                    Category.name.like('%' + category + '%') 
                ) 
            return render_template( 
                'products.html', products=products.paginate(page, 10) 
            )


    - We can now search with queries like:

        http://127.0.0.1:5000/product-search?name=iPhone