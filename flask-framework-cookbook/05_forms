-----------------------------------------------------------------------
|  CHAPTER 5 - WEBFORMS WITH WTFORMS                                  |
-----------------------------------------------------------------------

- Representing SQLAlchemy Data as a Form

    - WTForms is a library that provides many fields with server-side validation by default.
        We use the 'Flask-WTF' extension that integrates WTForms with Flask.

        $ pip install Flask-WTF


    - First, we will create a 'ProductForm' class to represent the fields in the form.  Note
        that the 'coerce' option on the category means the category will be coerced to an integer
        value prior to any validation or processing.

        # models.py
        -------------------------------------------
        from flask_wtf import FlaskForm 
        from wtforms import StringField, DecimalField, SelectField 
         
        class ProductForm(FlaskForm): 
            name = StringField('Name') 
            price = DecimalField('Price') 
            category = SelectField('Category', coerce=int)


    - Now, we can add a handler for the form.

        # views.py
        -------------------------------------------
        from my_app.catalog.models import ProductForm 
 
        @catalog.route('/product-create', methods=['GET', 'POST']) 
        def create_product(): 
            form = ProductForm(csrf_enabled=False) 
         
            categories = [(c.id, c.name) for c in Category.query.all()] 
            form.category.choices = categories 
         
            if request.method == 'POST': 
                name = form.name.data 
                price = form.price.data 
                category = Category.query.get_or_404( 
                    form.category.data 
                ) 
                product = Product(name, price, category) 
                db.session.add(product) 
                db.session.commit() 
                flash('The product %s has been created' % name, 'success') 
                return redirect(url_for('catalog.product', id=product.id)) 
            return render_template('product-create.html', form=form)


    - And we can add our form to the 'product-create' template.

        # templates/product-create.html
        -------------------------------------------
        {% extends 'home.html' %} 
 
        {% block container %} 
          <div class="top-pad"> 
            <form method="POST" action="{{ 
               url_for('catalog.create_product') }}" role="form"> 
              <div class="form-group">{{ form.name.label }}: {{ form.name() }}
              </div> 
              <div class="form-group">{{ form.price.label }}: {{ form.price() }}
              </div> 
              <div class="form-group">{{ form.category.label }}: {{ form.category() }}
              </div> 
              <button type="submit" class="btn btn-default">Submit</button> 
            </form> 
          </div> 
        {% endblock %} 



- Validating Fields on the Server Side

    - It's pretty easy to add validations to WTForms fields.

        # models.py
        -------------------------------------------
        from decimal import Decimal 
        from wtforms.validators import InputRequired, NumberRange 
         
        class ProductForm(FlaskForm): 
            name = StringField('Name', validators=[InputRequired()]) 
            price = DecimalField('Price', validators=[ 
                InputRequired(), NumberRange(min=Decimal('0.0')) 
            ]) 
            category = SelectField( 
                'Category', validators=[InputRequired()], coerce=int
            )


    - Then we have to modify our view method:

        # views.py
        -------------------------------------------
        def create_product():
            ...
            if request.method == 'POST' and form.validate(): 
                ... same as before ...
 
            if form.errors: 
                flash(form.errors, 'danger')


    - Note that we can also use the method:

         if form.validate_on_submit():
             ...

      Which is equivalent to:

         if request.method == 'POST' and form.validate():
             ...



- Creating a Common Forms Set

    - Since many forms use common fields with common validators, it is useful to create
        reusable form parts.

      In our application, we'll have a form for products and a form for categories.  We'll
        create a common form since they'll both use the product name.


        # models.py
        -------------------------------------------
        class NameForm(FlaskForm): 
            name = StringField('Name', validators=[InputRequired()]) 
         
        class ProductForm(NameForm): 
            price = DecimalField('Price', validators=[ 
                InputRequired(), NumberRange(min=Decimal('0.0')) 
            ]) 
            category = SelectField( 
                'Category', validators=[InputRequired()], coerce=int 
            ) 
         
        class CategoryForm(NameForm): 
            pass


    - We'll add a new view method for creating categories.

        # views.py
        -------------------------------------------
        @catalog.route('/category-create', methods=['GET', 'POST']) 
        def create_category(): 
            form = CategoryForm(csrf_enabled=False) 
         
            if form.validate_on_submit(): 
                name = form.name.data 
                category = Category(name) 
                db.session.add(category) 
                db.session.commit() 
                flash('The category %s has been created' % name, 'success') 
                return redirect(url_for('catalog.category', id=category.id)) 
         
            if form.errors: 
                flash(form.errors) 
         
            return render_template('category-create.html', form=form)



- Creating Custom Fields and Validation

    - So far, we have populated the values for the product categories in the SelectField
        on GET requests.  

      We want to create a custom field that takes care of this for us.

        # models.py
        -------------------------------------------
        class CategoryField(SelectField): 
 
            def iter_choices(self): 
                categories = [(c.id, c.name) for c in Category.query.all()] 
                for value, label in categories: 
                    yield (value, label, self.coerce(value) == self.data) 
         
            def pre_validate(self, form): 
                for v, _ in [(c.id, c.name) for c in Category.query.all()]: 
                    if self.data == v: 
                        break 
                else: 
                    raise ValueError(self.gettext('Not a valid choice')) 
         
        class ProductForm(NameForm): 
            price = DecimalField('Price', validators=[ 
                InputRequired(), NumberRange(min=Decimal('0.0')) 
            ]) 
            category = CategoryField( 
                'Category', validators=[InputRequired()], coerce=int 
            ) 


    - We can also create custom validations.  Here, we'll check for duplicate categories.

        # models.py
        -------------------------------------------
        from wtforms.validators import ValidationError 
 
        def check_duplicate_category(case_sensitive=True): 
            def _check_duplicate(form, field): 
                if case_sensitive: 
                    res = Category.query.filter( 
                        Category.name.like('%' + field.data + '%') 
                    ).first() 
                else: 
                    res = Category.query.filter( 
                        Category.name.ilike('%' + field.data + '%') 
                    ).first() 
                if res: 
                    raise ValidationError( 
                        'Category named %s already exists' % field.data 
                    ) 
            return _check_duplicate 
         
        class CategoryForm(NameForm): 
            name = StringField('Name', validators=[ 
                InputRequired(), check_duplicate_category() 
            ])



- Creating a Custom Widget

    - We can create custom widgets to control how our fields will look in the client.  
        Each WTForms field has a default widget attached to it, but these can be customized.

      For instance, our category field uses the 'Select' widget, which will render a select
        list.  We'll replace that with a radio field.

        # models.py
        -------------------------------------------
        from wtforms.widgets import html_params, Select, HTMLString 
 
        class CustomCategoryInput(Select): 
         
            def __call__(self, field, **kwargs): 
                kwargs.setdefault('id', field.id) 
                html = [] 
                for val, label, selected in field.iter_choices(): 
                    html.append( 
                        '<input type="radio" %s> %s' % ( 
                            html_params( 
                                name=field.name, value=val, checked=selected, **kwargs 
                            ), label 
                        ) 
                    ) 
                return HTMLString(' '.join(html)) 
         
        class CategoryField(SelectField): 
            widget = CustomCategoryInput() 
            ...



- Uploading Files via Forms

    - First, we'll need to add a couple configuration options to specify where files
        will be stored.

        # my_app/__init__.py
        -------------------------------------------
        import os 
 
        ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif']) 
        app.config['UPLOAD_FOLDER'] = os.path.realpath('.') + '/my_app/static/uploads'


    - Now, we'll add the image path to the Product model and form.

        # my_app/catalog/models.py
        -------------------------------------------
        from flask_wtf.file import FileField, FileRequired 
 
        class Product(db.Model): 
            image_path = db.Column(db.String(255)) 
         
            def __init__(self, name, price, category, image_path): 
                self.image_path = image_path 
         
        class ProductForm(NameForm): 
            image = FileField('Product Image', validators=[FileRequired()])


    - We'll update the view method.

        # my_app/catalog/views.py
        -------------------------------------------
        import os 
        from werkzeug import secure_filename 
        from my_app import ALLOWED_EXTENSIONS 
         
        def allowed_file(filename): 
            return '.' in filename and \ 
                    filename.lower().rsplit('.', 1)[1] in ALLOWED_EXTENSIONS 
         
        @catalog.route('/product-create', methods=['GET', 'POST']) 
        def create_product(): 
            form = ProductForm(request.form, csrf_enabled=False) 
         
            if form.validate_on_submit(): 
                name = form.name.data 
                price = form.price.data 
                category = Category.query.get_or_404(form.category.data ) 
                image = form.image.data

                if allowed_file(image.filename): 
                    filename = secure_filename(image.filename) 
                    image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))

                product = Product(name, price, category, filename) 
                db.session.add(product) 
                db.session.commit() 
                flash('The product %s has been created' % name, 'success') 
                return redirect(url_for('catalog.product', id=product.id)) 
         
            if form.errors: 
                flash(form.errors, 'danger') 
         
            return render_template('product-create.html', form=form)


    - Now, we'll add the new field to the product-create form.  Note that the
        enctype="multipart/form-data" must be used with file imports.

        # templates/product-create.html
        -------------------------------------------
        <form method="POST" 
            action="{{ url_for('create_product') }}" 
            role="form"  
            enctype="multipart/form-data"> 
        <!-- The other field definitions as always -->
        <div class="form-group">
          {{ form.image.label }}: {{ form.image(style='display:inline;') }}
        </div>


    - Rendering the image in the product page is easy.

        # templates/product.html
        -------------------------------------------
        <img src="{{ url_for('static', filename='uploads/' + product.image_path) }}"/>



- Protecting Applications from CSRF

    - Flask does not provide any CSRF prevention by default, so we will need to use the
        features provided by the WTF-Flask extension.

      The protection is on by default, so we can just use:

        # Create form
        form = ProductForm()


    - We'll need to make sure a secret key is configured for our application so that CSRF
        tokens can be generated.  If we don't create a separate one for WTF-Flask, the 
        application's secret key will be used.

        # Secret key for WTF-Flask
        app.config['WTF_CSRF_SECRET_KEY'] = 'random key for form' 


    - Now, we just need to add the csrf token to the forms:

        <form method="POST" action="/some-action-like-create-product"> 
            {{ form.csrf_token }} 
        </form>



- CSRF in AJAX Requests

    - Note that we also submit AJAX form posts.  For this, we need to add an option to our
        application configuration.

        # Add to app config
        from flask_wtf.csrf import CSRFProtect 
        CSRFProtect(app) 


    - Now, we can access a CSRF token anywhere in our templates.  Here are 2 ways to do this:

        1. Fetch the token in the script tag and use it in the POST request.

             <script type="text/javascript">
                 var csrfToken = "{{ csrf_token() }}";
             </script>

        2. Render the token in a 'meta' tag and use it wherever appropriate.

             <meta name="csrf-token" content="{{ csrf_token() }}" />


    - Finally, we add a CSRF token to our AJAX request.  To do this, we need to add the 
        'X-CSRFToken' attribute to it.

        var csrfToken = $('meta[name="csrf-token"]').attr('content'); 
 
        $.ajaxSetup({ 
            beforeSend: function(xhr, settings) { 
                if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type)) { 
                    xhr.setRequestHeader("X-CSRFToken", csrftoken) 
                } 
            } 
        })