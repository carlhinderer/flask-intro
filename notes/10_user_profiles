-----------------------------------------------------------------------
|  CHAPTER 10 - USER ROLES                                            |
-----------------------------------------------------------------------

- Profile Information

    - To make user profile pages more interesting, we'll add several new columns to the
        'users' table.

        # app/models.py

        class User(UserMixin, db.Model):
            # ...
            name = db.Column(db.String(64))
            location = db.Column(db.String(64))
            about_me = db.Column(db.Text())
            member_since = db.Column(db.DateTime(), default=datetime.utcnow)
            last_seen = db.Column(db.DateTime(), default=datetime.utcnow)


    - Note that the 'about_me' column is a 'db.Text', so it is variable-length.


    - The 'last_seen' field needs to be refreshed each time the user accesses the site.  
        We can add a method to the User class to perform this update.

        # app/models.py

        class User(UserMixin, db.Model):
            # ...
            def ping(self):
                self.last_seen = datetime.utcnow()
                db.session.add(self)
                db.session.commit()


    - Then, we can add the 'ping' to our 'before_request' hook.

        # app/auth/views.py

        @auth.before_app_request
        def before_request():
            if current_user.is_authenticated:
                current_user.ping()
                if not current_user.confirmed \
                        and request.endpoint \
                        and request.blueprint != 'auth' \
                        and request.endpoint != 'static':
                    return redirect(url_for('auth.unconfirmed'))



- User Profile Page

    - Creating a profile page for each user is straightforward.  Here is the route for the
        profile page.

        # app/main/views.py

        @main.route('/user/<username>')
        def user(username):
            user = User.query.filter_by(username=username).first_or_404()
            return render_template('user.html', user=user)


    - Here is the User Profile template:

        # app/templates/user.html

        {% extends "base.html" %}
        {% block title %}Flasky - {{ user.username }}{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>{{ user.username }}</h1>
            {% if user.name or user.location %}
            <p>
                {% if user.name %}{{ user.name }}{% endif %}
                {% if user.location %}
                    From <a href="http://maps.google.com/?q={{ user.location }}">
                        {{ user.location }}
                    </a>
                {% endif %}
            </p>
            {% endif %}
            {% if current_user.is_administrator() %}
            <p><a href="mailto:{{ user.email }}">{{ user.email }}</a></p>
            {% endif %}
            {% if user.about_me %}<p>{{ user.about_me }}</p>{% endif %}
            <p>
                Member since {{ moment(user.member_since).format('L') }}.
                Last seen {{ moment(user.last_seen).fromNow() }}.
            </p>
        </div>
        {% endblock %}


    - And, we can add the link to the User Profile page to the main navbar.

        # app/templates/base.html

        {% if current_user.is_authenticated %}
        <li>
            <a href="{{ url_for('main.user', username=current_user.username) }}">
                Profile
            </a>
        </li>
        {% endif %}



- User-Level Profile Editor

    - There are 2 different use cases for editing profiles:

        1. The user needs to edit their own profile information
        2. The administrator needs to edit users, including fields like role

      Since these forms are substantially different, we'll add 2 different forms.


    - Here is the profile editing form for regular users:

        # app/main/forms.py

        class EditProfileForm(FlaskForm):
            name = StringField('Real name', validators=[Length(0, 64)])
            location = StringField('Location', validators=[Length(0, 64)])
            about_me = TextAreaField('About me')
            submit = SubmitField('Submit')

      Note that since all the fields in the form are optional, the length validator allows
        a length of 0.


    - Here is the view method for editing the profile:

        # app/main/views.py

        @main.route('/edit-profile', methods=['GET', 'POST'])
        @login_required
        def edit_profile():
            form = EditProfileForm()
            if form.validate_on_submit():
                current_user.name = form.name.data
                current_user.location = form.location.data
                current_user.about_me = form.about_me.data
                db.session.add(current_user._get_current_object())
                db.session.commit()
                flash('Your profile has been updated.')
                return redirect(url_for('.user', username=current_user.username))
            form.name.data = current_user.name
            form.location.data = current_user.location
            form.about_me.data = current_user.about_me
            return render_template('edit_profile.html', form=form)


    - We can add a link on the profile page to the profile edit form.

        # app/templates/user.html

        {% if user == current_user %}
        <a class="btn btn-default" href="{{ url_for('.edit_profile') }}">
            Edit Profile
        </a>
        {% endif %}



- Administrator-Level Profile Editor

    - In addition to the 3 user fields, admins can also edit a user's email, username, confirmed
        status, and role.  Here is the form:

        # app/main/forms.py

        class EditProfileAdminForm(FlaskForm):
            email = StringField('Email', validators=[DataRequired(), Length(1, 64),
                                                     Email()])
            username = StringField('Username', validators=[
                DataRequired(), Length(1, 64),
                Regexp('^[A-Za-z][A-Za-z0-9_.]*$', 0,
                       'Usernames must have only letters, numbers, dots or '
                       'underscores')])
            confirmed = BooleanField('Confirmed')
            role = SelectField('Role', coerce=int)
            name = StringField('Real name', validators=[Length(0, 64)])
            location = StringField('Location', validators=[Length(0, 64)])
            about_me = TextAreaField('About me')
            submit = SubmitField('Submit')
        
            def __init__(self, user, *args, **kwargs):
                super(EditProfileAdminForm, self).__init__(*args, **kwargs)
                self.role.choices = [(role.id, role.name)
                                     for role in Role.query.order_by(Role.name).all()]
                self.user = user
        
            def validate_email(self, field):
                if field.data != self.user.email and \
                        User.query.filter_by(email=field.data).first():
                    raise ValidationError('Email already registered.')
        
            def validate_username(self, field):
                if field.data != self.user.username and \
                        User.query.filter_by(username=field.data).first():
                    raise ValidationError('Username already in use.')


    - The 'SelectField' is WTFormâ€™s wrapper for the <select> HTML form control, which implements 
        a drop-down list, used in this form to select a user role. An instance of SelectField must 
        have the items set in its choices attribute. 

      They must be given as a list of tuples, with each tuple consisting of two values: an 
        identifier for the item and the text to show in the control as a string.  

      The identifier for each tuple is set to the id of each role, and since these are integers, 
        a 'coerce=int' argument is added to the SelectField constructor so that the field values 
        are stored as integers instead of the default, which is strings.


    - Here is the view method for admin editing of profiles.

        # app/main/views.py

        from ..decorators import admin_required

        @main.route('/edit-profile/<int:id>', methods=['GET', 'POST'])
        @login_required
        @admin_required
        def edit_profile_admin(id):
            user = User.query.get_or_404(id)
            form = EditProfileAdminForm(user=user)
            if form.validate_on_submit():
                user.email = form.email.data
                user.username = form.username.data
                user.confirmed = form.confirmed.data
                user.role = Role.query.get(form.role.data)
                user.name = form.name.data
                user.location = form.location.data
                user.about_me = form.about_me.data
                db.session.add(user)
                db.session.commit()
                flash('The profile has been updated.')
                return redirect(url_for('.user', username=user.username))
            form.email.data = user.email
            form.username.data = user.username
            form.confirmed.data = user.confirmed
            form.role.data = user.role_id
            form.name.data = user.name
            form.location.data = user.location
            form.about_me.data = user.about_me
            return render_template('edit_profile.html', form=form, user=user)


    - Finally, we add a button for admin edits of user profiles.

        # app/templates/user.html

        <p>
            {% if user == current_user %}
            <a class="btn btn-default" href="{{ url_for('.edit_profile') }}">Edit Profile</a>
            {% endif %}
            {% if current_user.is_administrator() %}
            <a class="btn btn-danger" href="{{ url_for('.edit_profile_admin', id=user.id) }}">
                Edit Profile [Admin]
            </a>
            {% endif %}
        </p>



- User Avatars

    - To show images, we'll use the leading avatar service, 'Gravatar'.  Gravatar associates
        avatar images with email addresses.  Users create an account at 'https://gravatar.com'
        and upload their images.

      The service exposes the user's avatar through a specially crafted URL that includes the
        MD5 hash of the user's email address.

        >>> import hashlib
        >>> hashlib.md5('john@example.com'.encode('utf-8')).hexdigest()
        'd4c74594d841139328695756648b6bd6'


    - The avatar URLs are then generated by appending the MD5 hash to the 
        'https://secure.gravatar.com/avatar/' URL.

      For instance, to get the gravatar for 'john@example.com', we can use
        'https://secure.gravatar.com/avatar/d4c74594d841139328695756648b6bd6'.

      A default image will be returned if the email address does not have an avatar registered.


    - There are a few options that can be added to the query params to customize the 
        characteristics of the image.

        Argument name     Description
        --------------------------------------------------------------------
        s                 Image size, in pixels.

        r                 Image rating. Options are "g", "pg", "r", and "x".

        d                 The default image generator for users who have no avatars registered with 
                            the Gravatar service. Options are "404" to return a 404 error, a URL 
                            that points to a default image, or one of the following image 
                            generators: "mm", "identicon", "monsterid", "wavatar", "retro", or "blank".

        fd                Force the use of default avatars.



- Adding Gravatars to User Profiles

    - Here is how we can add the gravatar to our user model.

        # app/models.py

        import hashlib
        from flask import request
        
        class User(UserMixin, db.Model):
            # ...
            def gravatar(self, size=100, default='identicon', rating='g'):
                url = 'https://secure.gravatar.com/avatar'
                hash = hashlib.md5(self.email.lower().encode('utf-8')).hexdigest()
                return '{url}/{hash}?s={size}&d={default}&r={rating}'.format(
                    url=url, hash=hash, size=size, default=default, rating=rating)


    - We can test this in the shell.

        >>> u = User(email='john@example.com')
        >>> u.gravatar()
        'https://secure.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=100&d=
         identicon&r=g'

        >>> u.gravatar(size=256)
        'https://secure.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=256&d=
         identicon&r=g'



- Updating Styles

    - We can also call 'user.gravatar()' in a template.

        # app/templates/user.html

        <img class="img-rounded profile-thumbnail" src="{{ user.gravatar(size=256) }}">
        <div class="profile-header">
           ...
        </div>


    - Note that we also created a div with the 'profile-header' class.  We will create a custom
        CSS class for styling the profiles.

        # app/static/styles.css

        .profile-thumbnail {
            position: absolute;
        }

        .profile-header {
            min-height: 260px;
            margin-left: 280px;
        }


    - And, we need to add our new CSS file to base template.  Also in the base template, we 
        change the account dropdown to show the gravatar instead of 'Account'.

        # app/templates/base.html

        <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='styles.css') }}">
            ...
        <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Account <b class="caret"></b></a>
            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                <img src="{{ current_user.gravatar(size=18) }}">
                Account <b class="caret"></b>
            </a>


    - We also update the 'user.html' template to use the profile header styles.

        # app/templates/user.html

        <img class="img-rounded profile-thumbnail" src="{{ user.gravatar(size=256) }}">
        <div class="profile-header">
            ...
        </div>



- Tests for Gravatars

    - Here is the test for the gravatar retrieval from the User model:

        # tests/test_user_model.py

        def test_gravatar(self):
            u = User(email='john@example.com', password='cat')
            with self.app.test_request_context('/'):
                gravatar = u.gravatar()
                gravatar_256 = u.gravatar(size=256)
                gravatar_pg = u.gravatar(rating='pg')
                gravatar_retro = u.gravatar(default='retro')
            self.assertTrue('https://secure.gravatar.com/avatar/' +
                            'd4c74594d841139328695756648b6bd6'in gravatar)
            self.assertTrue('s=256' in gravatar_256)
            self.assertTrue('r=pg' in gravatar_pg)
            self.assertTrue('d=retro' in gravatar_retro)
            self.assertTrue('https://secure.gravatar.com/avatar/' +
                            'd4c74594d841139328695756648b6bd6' in gravatar_ssl)



- Caching Gravatar Hashes

    - The generation of avatars requires an MD5 hash to be generated, which is a CPU-intensive
        operation.  This can become significant for a large number of users.

      Since the MD5 has will remain constant as long as the email address is the same, it can
        be cached in the 'users' table.


        # app/models.py

        class User(UserMixin, db.Model):
            # ...
            avatar_hash = db.Column(db.String(32))
        
            def __init__(self, **kwargs):
                # ...
                if self.email is not None and self.avatar_hash is None:
                    self.avatar_hash = self.gravatar_hash()
        
            def change_email(self, token):
                # ...
                self.email = new_email
                self.avatar_hash = self.gravatar_hash()
                db.session.add(self)
                return True
        
            def gravatar_hash(self):
                return hashlib.md5(self.email.lower().encode('utf-8')).hexdigest()
        
            def gravatar(self, size=100, default='identicon', rating='g'):
                if request.is_secure:
                    url = 'https://secure.gravatar.com/avatar'
                else:
                    url = 'http://www.gravatar.com/avatar'
                hash = self.avatar_hash or self.gravatar_hash()
                return '{url}/{hash}?s={size}&d={default}&r={rating}'.format(
                    url=url, hash=hash, size=size, default=default, rating=rating)