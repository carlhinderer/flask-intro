-----------------------------------------------------------------------
|  CHAPTER 8 - USER AUTHENTICATION                                    |
-----------------------------------------------------------------------

- There are many excellent Python authentication packages, but none of them do everything.
    Here, we'll use several packages and provide the glue that holds them together.

  Authentication Packages:

    1. Flask-Login
         Management of user sessions for logged-in users

    2. Werkzeug
         Password hashing and verification

    3. itsdangerous
         Cryptographically secure token generation and verification



- Hashing Passwords with Werkzeug

    - Werzkeug's 'security' module conveniently implements secure password hashing.  It's
        functionality is exposed with 2 simple functions.


        # Takes in plain-text password and returns the password hash
        generate_password_hash(password, method='pbkdf2:sha256', salt_length=8)

        # Takes in password and hash, and returns True if they are the same
        check_password_hash(hash, password)


    - We'll update the 'User' model to accomodate password hashing.


        from werkzeug.security import generate_password_hash, check_password_hash

        class User(db.Model):
            # ...
            password_hash = db.Column(db.String(128))
        
            @property
            def password(self):
                raise AttributeError('password is not a readable attribute')
        
            @password.setter
            def password(self, password):
                self.password_hash = generate_password_hash(password)
        
            def verify_password(self, password):
                return check_password_hash(self.password_hash, password)


    - We can test the password hashing in the shell.

        >>> u = User()
        >>> u.password = 'cat'

        >>> u.password
        AttributeError: password is not a readable attribute

        >>> u.password_hash
        'pbkdf2:sha256:50000$moHwFH1B$ef1574909f9c549285e8547cad181c5e0213cfa44a4aba4349
        fa830aa1fd227f'

        >>> u.verify_password('cat')
        True
        >>> u.verify_password('dog')
        exit
        False



- Creating an Authentication Blueprint

    - Blueprints were used in Chapter 7 to define routes in the global scope after the creation
        of the application was moved into a factory function.  In this section, we'll add the
        routes related to the user authentication subsystem into a second blueprint called 'auth'.

      The 'auth' blueprint will be hosted in a Python package with the same name.  


        # app/auth/__init__.py
        from flask import Blueprint

        auth = Blueprint('auth', __name__)

        from . import views


    - Here, we define the route.


        # app/auth/views.py
        from flask import render_template
        from . import auth

        @auth.route('/login')
        def login():
            return render_template('auth/login.html')


    - Also, we need to add the auth blueprint to the 'create_app()' factory function.


        def create_app(config_name):
            # ...
            from .auth import auth as auth_blueprint
            app.register_blueprint(auth_blueprint, url_prefix='/auth')
        
            return app