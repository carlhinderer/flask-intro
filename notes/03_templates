-----------------------------------------------------------------------
|  CHAPTER 3 - TEMPLATES                                              |
-----------------------------------------------------------------------

- Templates

    - Mixing business and presentation logic leads to web applications that are hard to
        maintain.  We move the presentation logic into templates to improve maintainability.

      A 'template' is a file that contains the text for the response, with placeholders for
        dynamic content generated during the handling of the request.  The process of 
        replacing the placeholders with the dynamic content is called 'rendering'.

      Jinja2 is the rendering engine used by Flask.



- The Jinja2 Template Engine

    - Simple templates and view methods that return them:

        # templates/index.html
        <h1>Hello World!</h1>

        # templates/user.html
        <h1>Hello, {{ name }}!</h1>


        # hello.py
        from flask import Flask, render_template

        @app.route('/')
        def index():
            return render_template('index.html')

        @app.routet('/user/<name>')
        def user(name):
            return render_template('user.html', name=name)


    - By default, Flask looks for templates in a 'templates' subdirectory of the main 
        application directory.  



- Variables

    - Jinja2 recognizes variables of any type, including complex types like lists, 
        dictionaries, and objects.

        <p>A value from a dictionary: {{ mydict['key'] }}.</p>
        <p>A value from a list: {{ mylist[3] }}.</p>
        <p>A value from a list, with a variable index: {{ mylist[myintvar] }}.</p>
        <p>A value from an object's method: {{ myobj.somemethod() }}.</p>


    - Variables can be modified with filters, which are added after the variable name with
        a pipe as a separator.

        Hello, {{ name | capitalize }}


    - Here are some commonly used filters:

        Filter name         Description
        --------------------------------------------------------------------------
        safe                Renders the value without applying escaping

        capitalize          Converts the first character of the value to uppercase and the 
                              rest to lowercase

        lower               Converts the value to lowercase characters

        upper               Converts the value to uppercase characters

        title               Capitalizes each word in the value

        trim                Removes leading and trailing whitespace from the value

        striptags           Removes any HTML tags from the value before rendering



    - Note that the 'safe' filter is important to highlight.  By default, Jinja2 escapes all
        variables for security purposes.  

      For example, if you set a variable to:
        '<h1>Hello</h1>'

      It will get rendered as:
        '&lt;h1&gt;Hello&lt;/h1&gt;'

      The 'safe' filter allows you to render the text the way it appears in the code, but you
        must be very careful and not use untrusted values like user input.



- Basic Control Structures

    - Conditionals

        {% if user %}
            Hello, {{ user }}!
        {% else %}
            Hello, Stranger!
        {% endif %}


    - For Loops

        <ul>
            {% for comment in comments %}
                <li>{{ comment }}</li>
            {% endfor %}
        </ul>



- Macros

    - Macros serve a purpose similar to functions.

        # Define a macro
        {% macro render_comment(comment) %}
            <li>{{ comment }}</li>
        {% endmacro %}
        

        # Use the macro
        <ul>
            {% for comment in comments %}
                {{ render_comment(comment) }}
            {% endfor %}
        </ul>


    - To make macros more usable, they can be stored in standalone files that are then 
        imported by all the files that need them.  

        {% import 'macros.html' as macros %}

        <ul>
            {% for comment in comments %}
                {{ macros.render_comment(comment) }}
            {% endfor %}
        </ul>



- Template Inheritance

    - First, we create a base template:

        # base.html
        <html>
        <head>
            {% block head %}
            <title>{% block title %}{% endblock %} - My Application</title>
            {% endblock %}
        </head>
        <body>
            {% block body %}
            {% endblock %}
        </body>
        </html>


    - Base templates define blocks that can be overridden by derived templates.  The Jinja2
        'block' and 'endblock' directives define blocks of content that are added to the base
        template.

      Here, there are blocks called 'head', 'title', and 'body'.  Note that 'title' is contained
        by 'head'.

        # index.html
        {% extends "base.html" %}
        {% block title %}Index{% endblock %}
        {% block head %}
            {{ super() }}
            <style>
            </style>
        {% endblock %}
        {% block body %}
        <h1>Hello, World!</h1>
        {% endblock %}


    - The 'extends' directive declares that this template derives from 'base.html'.

      When a block has some content in both the base and derived templates, the content
        from the derived template is used.  Within this block, the derived template can
        call 'super()' to reference the contents of the block in the base template.



- Bootstrap Integration with Flask-Bootstrap

    - The naive approach to integrating Bootstrap with the application is to make all the
        necessary changes to HTML templates as specified in the Boostrap documentation.

      Instead, we can also use a Flask extension, which can make the integration task easier.


    - First, we need to install the Flask-Bootstrap extension.

        $ pip install flask-bootstrap


    - Flask extensions are initialized at the same time the application instance is created.

        from flask_bootstrap import Bootstrap
        bootstrap = Bootstrap(app)


    - Once Flask-Bootstrap is installed, a base template that includes all the Bootstrap 
        files and general structure is available to the application.  Here is a new version
        of the user template extending this base template.

        # templates/user.html
        {% extends "bootstrap/base.html" %}

        {% block title %}Flasky{% endblock %}
        
        {% block navbar %}
        <div class="navbar navbar-inverse" role="navigation">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle"
                     data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="/">Flasky</a>
                </div>
                <div class="navbar-collapse collapse">
                    <ul class="nav navbar-nav">
                        <li><a href="/">Home</a></li>
                    </ul>
                </div>
            </div>
        </div>
        {% endblock %}
        
        {% block content %}
        <div class="container">
            <div class="page-header">
                <h1>Hello, {{ name }}!</h1>
            </div>
        </div>
        {% endblock %}



- Flask-Bootstrap's Basic Template Blocks

    - Here is the list of Flask-Bootstrap blocks that can be used in derived templates.

        Block name           Description
        ------------------------------------------------------------------------------
        doc                  The entire HTML document

        html_attribs         Attributes inside the <html> tag

        html                 The contents of the <html> tag

        head                 The contents of the <head> tag

        title                The contents of the <title> tag

        metas                The list of <meta> tags

        styles               CSS definitions

        body_attribs         Attributes inside the <body> tag

        body                 The contents of the <body> tag

        navbar               User-defined navigation bar

        content              User-defined page content

        scripts              JavaScript declarations at the bottom of the document


    - Many of the blocks listed here are used by Flask-Bootstrap itself, so overriding
        them directly would cause problems.  For instance, the 'styles' and 'scripts'
        blocks are where Bootstrap CSS and JS files are declared.  

      If the application needs to add its own content to a block that already has some
        content, Jinja2's 'super()' function must be used.  For instance, if we need to add
        a new JS file to our derived template:

        {% block scripts %}
        {{ super() }}
        <script type='text/javascript' src='my-script.js'></script>
        {% endblock %}



- Custom Error Pages


- Links


- Static Files


- Localization with Dates and Times with Flask-Moment