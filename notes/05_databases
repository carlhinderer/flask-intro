-----------------------------------------------------------------------
|  CHAPTER 5 - DATABASES                                              |
-----------------------------------------------------------------------

- Database Access with Flask-SQLAlchemy

    - SQLAlchemy is a powerful relational database framework that supports several
        database backends.  It offers a high-level ORM and low-level access to the database's
        native SQL functionality.

        $ pip install flask-sqlalchemy


    - In Flask-SQLAlchemy, a database is specified as a URL.

        Database engine            URL
        ---------------------------------------------------------------------
        MySQL                      mysql://username:password@hostname/database

        Postgres                   postgresql://username:password@hostname/database

        SQLite (Linux, macOS)      sqlite:////absolute/path/to/database


    - The URL of the application database must be configured as the key 
        'SQLALCHEMY_DATABASE_URI' in the Flask config object.  The documentation also recommends
        setting 'SQLALCHEMY_TRACK_MODIFICATIONS' to False to use less memory unless signals for
        object changes are needed.


        import os
        from flask_sqlalchemy import SQLAlchemy

        db_url = 'postgresql://flaskexampleuser:flaskexamplepw@localhost/flaskexample'
        app.config['SQLALCHEMY_DATABASE_URI'] = db_url
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        db = SQLAlchemy(app)



- Model Definitions

    - Here are model definitions for the 'Role' and 'User' tables.

        # hello.py

        class Role(db.Model):
            __tablename__ = 'roles'
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String(64), unique=True)
        
            def __repr__(self):
                return '<Role %r>' % self.name
        

        class User(db.Model):
            __tablename__ = 'users'
            id = db.Column(db.Integer, primary_key=True)
            username = db.Column(db.String(64), unique=True, index=True)
        
            def __repr__(self):
                return '<User %r>' % self.username


    - The '__tablename__' class variable defines the name of the table in the database.  If
        it's not specified, a default table name will be created.  

      The poplular convention is to pluralize the table names, so we typically want to name them
        manually to do that.


    - Implementing the '__repr__' method isn't strictly necessary, but it is helpful for debugging
        purposes.


    - All Flask-SQLAlchemy models are required to have a primary key column, usually named 'id'.



- List of Commonly Used SQLAlchemy Column Types

    Type name         Python type           Description
    ---------------------------------------------------------------------------------
    Integer           int                   Regular integer, typically 32 bits

    SmallInteger      int                   Short-range integer, typically 16 bits

    BigInteger        int or long           Unlimited precision integer

    Float             float                 Floating-point number

    Numeric           decimal.Decimal       Fixed-point number

    String            str                   Variable-length string

    Text              str                   Variable-length string, optimized for large or unbounded 
                                              length

    Unicode           unicode               Variable-length Unicode string

    UnicodeText       unicode               Variable-length Unicode string, optimized for large or 
                                              unbounded length

    Boolean           bool                  Boolean value

    Date              datetime.date         Date value

    Time              datetime.time         Time value

    DateTime          datetime.datetime     Date and time value

    Interval          datetime.timedelta    Time interval

    Enum              str                   List of string values

    PickleType        Any Python object     Automatic Pickle serialization

    LargeBinary       str                   Binary blob



- Common SQLAlchemy Column Options

    Option name      Description
    ----------------------------------------------------------------------------
    primary_key      If set to True, the column is the tableâ€™s primary key.

    unique           If set to True, do not allow duplicate values for this column.

    index            If set to True, create an index for this column, so that queries are 
                       more efficient.

    nullable         If set to True, allow empty values for this column. If set to False, 
                       the column will not allow null values.

    default          Define a default value for the column.



- Relationships

    - Here, we establish a 1-M relationship between roles and users.  Each user can only have
        1 role.

        class Role(db.Model):
            # ...
            users = db.relationship('User', backref='role')
        
        class User(db.Model):
            # ...
            role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))


    - The 'backref' argument allows the role to be accessed from the user model by 'role'
        instead of 'role_id'.


    - 1-1 Relationships can be created the same way by using the 'uselist=False' argument on
        the 'db.relationship'.



- List of SQLAlchemy Relationship Options

    Option name        Description
    -------------------------------------------------------------------------------------
    backref            Add a back reference in the other model in the relationship.

    primaryjoin        Specify the join condition between the two models explicitly. This is 
                         necessary only for ambiguous relationships.

    lazy               Specify how the related items are to be loaded. Possible values are select 
                         (items are loaded on demand the first time they are accessed), immediate 
                         (items are loaded when the source object is loaded), joined (items are 
                         loaded immediately, but as a join), subquery (items are loaded immediately, 
                         but as a subquery), noload (items are never loaded), and dynamic (instead 
                         of loading the items, the query that can load them is given).

    uselist            If set to False, use a scalar instead of a list.

    order_by           Specify the ordering used for the items in the relationship.

    secondary          Specify the name of the association table to use in many-to-many relationships.

    secondaryjoin      Specify the secondary join condition for many-to-many relationships when 
                         SQLAlchemy cannot determine it on its own.



- Create, Update, and Delete Operations

    - Creating the Tables

        # Start flask shell
        $ flask shell

        # Create the tables that correspond to the models
        >>> from hello import db
        >>> db.create_all()
        
        # Drop all the created tables
        >>> db.drop_all()


    - Inserting Rows

        # Create a few roles and users
        >>> from hello import Role, User
        >>> admin_role = Role(name='Admin')
        >>> mod_role = Role(name='Moderator')
        >>> user_role = Role(name='User')
        >>> user_john = User(username='john', role=admin_role)
        >>> user_susan = User(username='susan', role=user_role)
        >>> user_david = User(username='david', role=user_role)

        # Add changes to the session
        >>> db.session.add(admin_role)
        >>> db.session.add(mod_role)
        >>> db.session.add(user_role)
        >>> db.session.add(user_john)
        >>> db.session.add(user_susan)
        >>> db.session.add(user_david)

        # More concise way to add to session
        >>> db.session.add_all([admin_role, mod_role, user_role, user_john, 
                                user_susan, user_david])

        # Persist database session
        >>> db.session.commit()


    - Modifying Rows

        # The 'add' method can be used to update models
        >>> admin_role.name = 'Administrator'
        >>> db.session.add(admin_role)
        >>> db.session.commit()


    - Deleting Rows

        # Delete the 'Moderator' role
        >>> db.session.delete(mod_role)
        >>> db.session.commit()



- Querying Rows

    - Flask-SQLAlchemy makes a 'query' object available for each model class.  The 'all'
        method will return the entire contents of the table.

        # Return all rows
        >>> Role.query.all()
        [<Role 'Administrator'>, <Role 'User'>]

        >>> User.query.all()
        [<User 'john'>, <User 'susan'>, <User 'david'>]


    - To filter the results:

        # Filter query results
        >>> User.query.filter_by(role=user_role).all()

        # View the SQL query being run
        >>> str(User.query.filter_by(role=user_role))

        # The first() method can be used to return the first element instead of an array
        >>> user_role = Role.query.filter_by(name='User').first()



- Query Filters

    Option            Description
    ----------------------------------------------------------------------------------
    filter()          Returns a new query that adds an additional filter to the original query

    filter_by()       Returns a new query that adds an additional equality filter to the original 
                        query

    limit()           Returns a new query that limits the number of results of the original query 
                        to the given number

    offset()          Returns a new query that applies an offset into the list of results of the 
                        original query

    order_by()        Returns a new query that sorts the results of the original query according 
                        to the given criteria

    group_by()        Returns a new query that groups the results of the original query according 
                        to the given criteria



- Query Executors

    Option            Description
    ----------------------------------------------------------------------------------
    all()             Returns all the results of a query as a list

    first()           Returns the first result of a query, or None if there are no results

    first_or_404()    Returns the first result of a query, or aborts the request and sends a 
                        404 error as the response if there are no results

    get()             Returns the row that matches the given primary key, or None if no matching 
                        row is found

    get_or_404()      Returns the row that matches the given primary key or, if the key is not 
                        found, aborts the request and sends a 404 error as the response

    count()           Returns the result count of the query

    paginate()        Returns a Pagination object that contains the specified range of results



- Querying Relationships

    - Here is an example of querying a 1:1 relationship from both sides:

       >>> users = user_role.users
       >>> users
       [<User 'susan'>, <User 'david'>]

       >>> users[0].role
       <Role 'User'>


    - There is one small problem with this approach.  The implicit query that runs when
        'user_role.users' is called calls 'all()', so it's not possible to use additional
        query filters.

      To fix this, we'll use the 'lazy' option on the relationship so that the query is not
        automatically executed.

        class Role(db.Model):
            # ...
            users = db.relationship('User', backref='role', lazy='dynamic')
            # ...


      Now, 'user_role.users' returns a query that hasn't executed yet, so filters can be added
        to it.

        >>> user_role.users.order_by(User.username).all()
        [<User 'david'>, <User 'susan'>]
        
        >>> user_role.users.count()
        2
