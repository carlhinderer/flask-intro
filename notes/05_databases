-----------------------------------------------------------------------
|  CHAPTER 5 - DATABASES                                              |
-----------------------------------------------------------------------

- Database Access with Flask-SQLAlchemy

    - SQLAlchemy is a powerful relational database framework that supports several
        database backends.  It offers a high-level ORM and low-level access to the database's
        native SQL functionality.

        $ pip install flask-sqlalchemy


    - In Flask-SQLAlchemy, a database is specified as a URL.

        Database engine            URL
        ---------------------------------------------------------------------
        MySQL                      mysql://username:password@hostname/database

        Postgres                   postgresql://username:password@hostname/database

        SQLite (Linux, macOS)      sqlite:////absolute/path/to/database


    - The URL of the application database must be configured as the key 
        'SQLALCHEMY_DATABASE_URI' in the Flask config object.  The documentation also recommends
        setting 'SQLALCHEMY_TRACK_MODIFICATIONS' to False to use less memory unless signals for
        object changes are needed.


        import os
        from flask_sqlalchemy import SQLAlchemy

        db_url = 'postgresql://flaskexampleuser:flaskexamplepw@localhost/flaskexample'
        app.config['SQLALCHEMY_DATABASE_URI'] = db_url
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        db = SQLAlchemy(app)



- Model Definitions

    - Here are model definitions for the 'Role' and 'User' tables.

        # hello.py

        class Role(db.Model):
            __tablename__ = 'roles'
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String(64), unique=True)
        
            def __repr__(self):
                return '<Role %r>' % self.name
        

        class User(db.Model):
            __tablename__ = 'users'
            id = db.Column(db.Integer, primary_key=True)
            username = db.Column(db.String(64), unique=True, index=True)
        
            def __repr__(self):
                return '<User %r>' % self.username


    - The '__tablename__' class variable defines the name of the table in the database.  If
        it's not specified, a default table name will be created.  

      The poplular convention is to pluralize the table names, so we typically want to name them
        manually to do that.


    - Implementing the '__repr__' method isn't strictly necessary, but it is helpful for debugging
        purposes.


    - All Flask-SQLAlchemy models are required to have a primary key column, usually named 'id'.



- List of Commonly Used SQLAlchemy Column Types

    Type name         Python type           Description
    ---------------------------------------------------------------------------------
    Integer           int                   Regular integer, typically 32 bits

    SmallInteger      int                   Short-range integer, typically 16 bits

    BigInteger        int or long           Unlimited precision integer

    Float             float                 Floating-point number

    Numeric           decimal.Decimal       Fixed-point number

    String            str                   Variable-length string

    Text              str                   Variable-length string, optimized for large or unbounded 
                                              length

    Unicode           unicode               Variable-length Unicode string

    UnicodeText       unicode               Variable-length Unicode string, optimized for large or 
                                              unbounded length

    Boolean           bool                  Boolean value

    Date              datetime.date         Date value

    Time              datetime.time         Time value

    DateTime          datetime.datetime     Date and time value

    Interval          datetime.timedelta    Time interval

    Enum              str                   List of string values

    PickleType        Any Python object     Automatic Pickle serialization

    LargeBinary       str                   Binary blob



- Common SQLAlchemy Column Options

    Option name      Description
    ----------------------------------------------------------------------------
    primary_key      If set to True, the column is the tableâ€™s primary key.

    unique           If set to True, do not allow duplicate values for this column.

    index            If set to True, create an index for this column, so that queries are 
                       more efficient.

    nullable         If set to True, allow empty values for this column. If set to False, 
                       the column will not allow null values.

    default          Define a default value for the column.