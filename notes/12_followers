-----------------------------------------------------------------------
|  CHAPTER 12 - FOLLOWERS                                             |
-----------------------------------------------------------------------

- Many-to-Many Relationships

    - Here is an example of a SQLAlchemy implementation of a M-M relationship
        between students and courses.

        registrations = db.Table('registrations',
            db.Column('student_id', db.Integer, db.ForeignKey('students.id')),
            db.Column('class_id', db.Integer, db.ForeignKey('classes.id'))
        )
        
        class Student(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String)
            classes = db.relationship('Class',
                                      secondary=registrations,
                                      backref=db.backref('students', lazy='dynamic'),
                                      lazy='dynamic')
        
        class Class(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String)


    - Then, we can use the relationships:

        # Register student for a course
        >>> s.classes.append(c)
        >>> db.session.add(s)

        # Access students and courses
        >>> s.classes.all()
        >>> c.students.all()

        # Drop a student from a course
        >>> s.classes.remove(c)



- Advanced Many-to-Many Relationships

    - The 'followers' relationship is self-referential between users.  Instead of 
        creating a simple join table, we'll create a class for the join table.  That
        way, we can also store extra relationship attributes if necessary.

    
    - Here is the new model and the 'User' model's relationship to it:

        # app/models.py
        ------------------------------------------
        class Follow(db.Model):
            __tablename__ = 'follows'
            follower_id = db.Column(db.Integer, 
                                    db.ForeignKey('users.id'), 
                                    primary_key=True)
            followed_id = db.Column(db.Integer, 
                                    db.ForeignKey('users.id'), 
                                    primary_key=True)
            timestamp = db.Column(db.DateTime, default=datetime.utcnow)

        class User(UserMixin, db.Model):
            # ...
            followed = db.relationship('Follow',
                                       foreign_keys=[Follow.follower_id],
                                       backref=db.backref('follower', lazy='joined'),
                                       lazy='dynamic',
                                       cascade='all, delete-orphan')
            followers = db.relationship('Follow',
                                        foreign_keys=[Follow.followed_id],
                                        backref=db.backref('followed', lazy='joined'),
                                        lazy='dynamic',
                                        cascade='all, delete-orphan')


    - Now, we can add the User model methods used to wire up the following.

        class User(db.Model):
            # ...
            def follow(self, user):
                if not self.is_following(user):
                    f = Follow(follower=self, followed=user)
                    db.session.add(f)
        
            def unfollow(self, user):
                f = self.followed.filter_by(followed_id=user.id).first()
                if f:
                    db.session.delete(f)
        
            def is_following(self, user):
                if user.id is None:
                    return False
                return self.followed.filter_by(
                    followed_id=user.id).first() is not None
        
            def is_followed_by(self, user):
                if user.id is None:
                    return False
                return self.followers.filter_by(
                    follower_id=user.id).first() is not None



- Followers on the Profile Page

    - The profile page of a user needs a 'Follow' button if the logged in user is not
        a follower, and an 'Unfollow' button if the user is a follower.

        # app/templates/user.html
        ------------------------------------------
        {% if current_user.can(Permission.FOLLOW) and user != current_user %}
            {% if not current_user.is_following(user) %}
            <a href="{{ url_for('.follow', username=user.username) }}"
                class="btn btn-primary">Follow</a>
            {% else %}
            <a href="{{ url_for('.unfollow', username=user.username) }}"
                class="btn btn-default">Unfollow</a>
            {% endif %}
        {% endif %}

        <a href="{{ url_for('.followers', username=user.username) }}">
            Followers: <span class="badge">{{ user.followers.count() }}</span>
        </a>

        <a href="{{ url_for('.followed_by', username=user.username) }}">
            Following: <span class="badge">{{ user.followed.count() }}</span>
        </a>

        {% if current_user.is_authenticated and user != current_user and
            user.is_following(current_user) %}
        | <span class="label label-default">Follows you</span>
        {% endif %}We have 4 new endpoints to wire up the followers.



    - We have 4 new endpoints to wire up the followers.

        # app/main/views.py
        ------------------------------------------
        @main.route('/follow/<username>')
        @login_required
        @permission_required(Permission.FOLLOW)
        def follow(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                flash('Invalid user.')
                return redirect(url_for('.index'))
            if current_user.is_following(user):
                flash('You are already following this user.')
                return redirect(url_for('.user', username=username))
            current_user.follow(user)
            db.session.commit()
            flash('You are now following %s.' % username)
            return redirect(url_for('.user', username=username))

        @main.route('/unfollow/<username>')
        @login_required
        @permission_required(Permission.FOLLOW)
        def unfollow(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                flash('Invalid user.')
                return redirect(url_for('.index'))
            if not current_user.is_following(user):
                flash('You are not following this user.')
                return redirect(url_for('.user', username=username))
            current_user.unfollow(user)
            db.session.commit()
            flash('You are not following %s anymore.' % username)
            return redirect(url_for('.user', username=username))

        @main.route('/followers/<username>')
        def followers(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                flash('Invalid user.')
                return redirect(url_for('.index'))
            page = request.args.get('page', 1, type=int)
            pagination = user.followers.paginate(
                page, per_page=current_app.config['FLASKY_FOLLOWERS_PER_PAGE'],
                error_out=False)
            follows = [{'user': item.follower, 'timestamp': item.timestamp}
                       for item in pagination.items]
            return render_template('followers.html', user=user, title="Followers of",
                                   endpoint='.followers', pagination=pagination,
                                   follows=follows)

        @main.route('/followed_by/<username>')
        def followed_by(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                flash('Invalid user.')
                return redirect(url_for('.index'))
            page = request.args.get('page', 1, type=int)
            pagination = user.followed.paginate(
                page, per_page=current_app.config['FLASKY_FOLLOWERS_PER_PAGE'],
                error_out=False)
            follows = [{'user': item.followed, 'timestamp': item.timestamp}
                       for item in pagination.items]
            return render_template('followers.html', user=user, title="Followed by",
                                   endpoint='.followed_by', pagination=pagination,
                                   follows=follows)



- Adding a Template for Followers

    - Here is the template for followers:

        # app/templates/followers.html
        ------------------------------------------
        {% extends "base.html" %}
        {% import "_macros.html" as macros %}
        
        {% block title %}Flasky - {{ title }} {{ user.username }}{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>{{ title }} {{ user.username }}</h1>
        </div>
        <table class="table table-hover followers">
            <thead><tr><th>User</th><th>Since</th></tr></thead>
            {% for follow in follows %}
            <tr>
                <td>
                    <a href="{{ url_for('.user', username = follow.user.username) }}">
                        <img class="img-rounded" src="{{ follow.user.gravatar(size=32) }}">
                        {{ follow.user.username }}
                    </a>
                </td>
                <td>{{ moment(follow.timestamp).format('L') }}</td>
            </tr>
            {% endfor %}
        </table>
        <div class="pagination">
            {{ macros.pagination_widget(pagination, endpoint, username = user.username) }}
        </div>
        {% endblock %}


    - Here is the new style for followers:

        # app/static/styles.css
        ------------------------------------------
        .table.followers tr {
            border-bottom: 1px solid #e0e0e0;
        }



- Querying Followed Posts Using a Database Join

    - Right now, our home page just shows all posts in descending chronological order.
        We'll change this to show tweets made by users followed by the logged in user
        instead.

      We could load all the users followed by the logged in user, then load each of their
        tweets from the database, but this would be an inefficient 'N+1' problem.  So,
        we'll add a manual join to load all the followed posts at once.

        # app/models.py
        ------------------------------------------
        class User(db.Model):
            # ...
            @property
            def followed_posts(self):
                return Post.query.join(Follow, Follow.followed_id == Post.author_id)\
                    .filter(Follow.follower_id == self.id)

      Note that the property is created so that 'followed_posts' can be accessed without
        '()' like other relationships.



- Showing Followed Posts on the Home Page

    - We'll update our 'index' view method.

        # app/main/views.py
        ------------------------------------------
        @main.route('/', methods = ['GET', 'POST'])
        def index():
            # ...
            show_followed = False
            if current_user.is_authenticated:
                show_followed = bool(request.cookies.get('show_followed', ''))
            if show_followed:
                query = current_user.followed_posts
            else:
                query = Post.query
            pagination = query.order_by(Post.timestamp.desc()).paginate(
                page, per_page=current_app.config['FLASKY_POSTS_PER_PAGE'],
                error_out=False)
            posts = pagination.items
            return render_template('index.html', form=form, posts=posts,
                                   show_followed=show_followed, pagination=pagination)


    - The choice of showing all or followed posts is stored in a cookie called 'show_followed'.
        When set to a nonempty string, it indicates that only the followed posts should be
        shown.  

      The 'show_followed' cookie is set in 2 new routes.

        # app/main/views.py
        ------------------------------------------
        @main.route('/all')
        @login_required
        def show_all():
            resp = make_response(redirect(url_for('.index')))
            resp.set_cookie('show_followed', '', max_age=30*24*60*60)  # 30 days
            return resp
        
        @main.route('/followed')
        @login_required
        def show_followed():
            resp = make_response(redirect(url_for('.index')))
            resp.set_cookie('show_followed', '1', max_age=30*24*60*60)  # 30 days
            return resp


    - We'll add a navbar link for the followers.

        # app/templates/index.html
        ------------------------------------------
        <div class="post-tabs">
            <ul class="nav nav-tabs">
                <li{% if not show_followed %} class="active"{% endif %}>
                    <a href="{{ url_for('.show_all') }}">All</a>
                </li>
                {% if current_user.is_authenticated %}
                <li{% if show_followed %} class="active"{% endif %}>
                    <a href="{{ url_for('.show_followed')     }}">Followers</a>
                </li>
                {% endif %}
            </ul>
            {% include '_posts.html' %}
        </div>


    - And we'll add the new styles for the tabs:

        # app/static/styles.css
        ------------------------------------------
        div.post-tabs {
            margin-top: 16px;
        }
        div.post-tabs ul.posts {
            margin: 0px;
            border-top: none;
        }


    - And we'll adjust the followers and followed counts on the user template.

        # app/templates/user.html
        ------------------------------------------
        <a href="{{ url_for('.followers', username=user.username) }}">
            Followers: <span class="badge">{{ user.followers.count() - 1 }}</span>
        </a>

        <a href="{{ url_for('.followed_by', username=user.username) }}">
            Following: <span class="badge">{{ user.followed.count() - 1 }}</span>
        </a>



- Adding Self Followers

    - If we navigate to our list of followed posts, we'll see that our own posts 
        don't appear on the list.  This is because users are not followers of
        themselves.  

      One easy way to fix this is to create a self-follow relationship when a new user
        is created.

        # app/models.py
        ------------------------------------------
        class User(UserMixin, db.Model):
        # ...
        def __init__(self, **kwargs):
            # ...
            self.follow(self)


    - We can add a script to add these relationships for users that already exist.

        # app/models.py
        ------------------------------------------
        class User(UserMixin, db.Model):
            # ...
            @staticmethod
            def add_self_follows():
                for user in User.query.all():
                    if not user.is_following(user):
                        user.follow(user)
                        db.session.add(user)
                        db.session.commit()
            # ...


      And run it in the shell.

        >>> User.add_self_follows()