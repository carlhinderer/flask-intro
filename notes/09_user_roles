-----------------------------------------------------------------------
|  CHAPTER 9 - USER ROLES                                             |
-----------------------------------------------------------------------

- Database Representation of Roles

    - Here is our new Role class, with a few columns added:

        # app/models.py
        class Role(db.Model):
            __tablename__ = 'roles'
            id = db.Column(db.Integer, primary_key=True)
            name = db.Column(db.String(64), unique=True)
            default = db.Column(db.Boolean, default=False, index=True)
            permissions = db.Column(db.Integer)
            users = db.relationship('User', backref='role', lazy='dynamic')
        
            def __init__(self, **kwargs):
                super(Role, self).__init__(**kwargs)
                if self.permissions is None:
                    self.permissions = 0


    - The new 'default' column should be True for only one role, and False for all the
        others.  The one marked default will be assigned to new users upon registration.
        
      Since this table is going to be searched for the default, this column gets an
        index.


    - The other new column is 'permissions'.  Here is the list of permissions:

        Task name                         Permission name     Permission value
        --------------------------------------------------------------------------
        Follow users                      FOLLOW              1

        Comment on posts made by others   COMMENT             2

        Write articles                    WRITE               4

        Moderate comments made by others  MODERATE            8

        Administration access             ADMIN               16


      The benefit of using powers of 2 is that we can combine them.


    - Here is the Permission class with these constants:

        # app/models.py
        class Permission:
            FOLLOW = 1
            COMMENT = 2
            WRITE = 4
            MODERATE = 8
            ADMIN = 16



- Permission Management in the Role Model

    - With the permission constants in place, we can now add a few methods to the Role
        model to manage permissions.

        class Role(db.Model):
            # ...

            def add_permission(self, perm):
                if not self.has_permission(perm):
                    self.permissions += perm

            def remove_permission(self, perm):
                if self.has_permission(perm):
                    self.permissions -= perm

            def reset_permissions(self):
                self.permissions = 0

            def has_permission(self, perm):
                return self.permissions & perm == perm


    - Now, we can test the permissions in the shell.

        >>> r = Role(name='User')
        >>> r.add_permission(Permission.FOLLOW)
        >>> r.add_permission(Permission.WRITE)

        >>> r.has_permission(Permission.FOLLOW)
        True
        >>> r.has_permission(Permission.ADMIN)
        False

        >>> r.reset_permissions()
        >>> r.has_permission(Permission.FOLLOW)
        False



- The User Roles

    - Here are the user roles we will support in our application.

        User role      Permissions                Description
        ----------------------------------------------------------------------------------------
        None           None                       Read-only access to the application. This applies 
                                                    to unknown users who are not logged in.

        User           FOLLOW, COMMENT, WRITE     Basic permissions to write articles and comments and 
                                                    to follow other users. This is the default for new 
                                                    users.

        Moderator      FOLLOW, COMMENT, WRITE,    Adds permission to moderate comments made by other users.
                       MODERATE
    
        Administrator  FOLLOW, COMMENT, WRITE,    Full access, which includes permission to change the
                       MODERATE, ADMIN              roles of other users.



    - Since adding the 4 roles manually can be error-prone and time-consuming, we'll add a method  to
        do it.  It will be useful for testing also.

        # app/models.py
        class Role(db.Model):
            # ...
            @staticmethod
            def insert_roles():
                roles = {
                    'User': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE],
                    'Moderator': [Permission.FOLLOW, Permission.COMMENT,
                                  Permission.WRITE, Permission.MODERATE],
                    'Administrator': [Permission.FOLLOW, Permission.COMMENT,
                                      Permission.WRITE, Permission.MODERATE,
                                      Permission.ADMIN],
                }
                default_role = 'User'
                for r in roles:
                    role = Role.query.filter_by(name=r).first()
                    if role is None:
                        role = Role(name=r)
                    role.reset_permissions()
                    for perm in roles[r]:
                        role.add_permission(perm)
                    role.default = (role.name == default_role)
                    db.session.add(role)
                db.session.commit()

    
    - Note that our 'insert_roles()' method is static, so it can be called directly on the class
        and does not require an object to be instantiated.

        >>> Role.insert_roles()



- Role Assignment

    - When users register, they should get the default role.  For most users, that should be the
        'User' role.  The only exception is administrators, who should get the 'Administrator'
        role to start.


        # app/models.py
        class User(UserMixin, db.Model):
            # ...
            def __init__(self, **kwargs):
                super(User, self).__init__(**kwargs)
                if self.role is None:
                    if self.email == current_app.config['FLASKY_ADMIN']:
                        self.role = Role.query.filter_by(name='Administrator').first()
                    if self.role is None:
                        self.role = Role.query.filter_by(default=True).first()
            # ...



- Role Verification

    - To simplify the implementation of roles and permissions, we can add a helper method
        that checks whether users have a given permission in a role they have been assigned.


        # app/models.py
        from flask_login import UserMixin, AnonymousUserMixin

        class User(UserMixin, db.Model):
            # ...
        
            def can(self, perm):
                return self.role is not None and self.role.has_permission(perm)
        
            def is_administrator(self):
                return self.can(Permission.ADMIN)
        
        class AnonymousUser(AnonymousUserMixin):
            def can(self, permissions):
                return False
        
            def is_administrator(self):
                return False
        
        login_manager.anonymous_user = AnonymousUser


    - The 'AnonymousUser' class is created as a convenience.  This way, we can call 
        'current_user.can()' and 'current_user.is_administrator()' without having to check 
        whether the user is logged in first.  

      Flask-Login is told to use the application's custom anonymous user by setting its class
        in the 'login_manager.anonymous_user' attribute.  



- Custom Decorators for Permissions

    - We can create 2 custom decorators, one for generic permission checks, and one for checking
        whether the user is an administrator.


        # app/decorators.py
        from functools import wraps
        from flask import abort
        from flask_login import current_user
        from .models import Permission
        
        def permission_required(permission):
            def decorator(f):
                @wraps(f)
                def decorated_function(*args, **kwargs):
                    if not current_user.can(permission):
                        abort(403)
                    return f(*args, **kwargs)
                return decorated_function
            return decorator
        
        def admin_required(f):
            return permission_required(Permission.ADMIN)(f)


    - These decorators are built using the Python standard library 'functools' package.  

      They return a 403 if the user does not have the required permission.  We'll have to add
        a 403 error template, similar to the 404 and 500 templates we created previously.

        # app/main/errors.py
        @main.app_errorhandler(403)
        def forbidden(e):
            return render_template('403.html')


        # app/templates/403.html
        {% extends "base.html" %}
        
        {% block title %}Flasky - Forbidden{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>Forbidden</h1>
        </div>
        {% endblock %}



- Using the Custom Decorators

    - Here are 2 examples of using these new decorators:


        from .decorators import admin_required, permission_required

        @main.route('/admin')
        @login_required
        @admin_required
        def for_admins_only():
            return "For administrators!"
        
        @main.route('/moderate')
        @login_required
        @permission_required(Permission.MODERATE)
        def for_moderators_only():
            return "For comment moderators!"


    - Permissions may also need to be checked from templates, so the 'Permission' class and
        all it's constants need to be accessible to them.  

      To avoid having to add a template argument in every 'render_template()' call, a 'context
        processor' can be used.  Context processors make variables available to all templates
        during rendering.


        # app/main/__init__.py
        @main.app_context_processor
        def inject_permissions():
            return dict(Permission=Permission)



- Unit Tests for Roles and Permissions

    - We can add unit tests to ensure the roles have the correct permissions.

        # tests/test_user_model.py
        def test_user_role(self):
            u = User(email='john@example.com', password='cat')
            self.assertTrue(u.can(Permission.FOLLOW))
            self.assertTrue(u.can(Permission.COMMENT))
            self.assertTrue(u.can(Permission.WRITE))
            self.assertFalse(u.can(Permission.MODERATE))
            self.assertFalse(u.can(Permission.ADMIN))
        ...