-----------------------------------------------------------------------
|  CHAPTER 14 - APIs                                                  |
-----------------------------------------------------------------------

- Introduction to REST

    - With more fully-featured client-side applications, the web server simply becomes
        a 'web service' or 'API'.

      Clients can communicate with web services using a variety of protocols, including
        XML-RPC and SOAP.  REST has emerged as the favorite.


    - Roy Fielding's PHD dissertation described the characteristics of a REST architecture:

        1. Client-server 

             Separation between client and server

        2. Stateless

             A client request must contain all the necessary information for it to be carried
               out.  The server must store any state about the client that persists from one
               request to the next.

        3. Cache

             Responses from the server can be labeled as cacheable or noncacheable so that 
               clients (or intermediaries) can use a cache for optimization purposes.

        4. Uniform interface

             The protocol for accessing server resources must be consistent, well-defined, 
               and standardized.

        5. Layered system

             Proxy servers, caches, or gateways can be inserted between clients and servers as
               necessary to improve performance, reliability, and scalability.

        6. Code-on-demand

             Clients can optionally download code from the server to execute in their context.



- Resources are Everything

    - A 'resource' is an item of interest in the domain of the application.  Each resource must
        have a unique identifier.

        /api/posts/12345


    - An API can also define collection URLs that represent logical subsets of all the resources
        in a class.

        /api/posts/12345/comments/



- Request Methods

    - Here are the commonly used request methods:

        GET    Individual resource URL
                  - Obtain the resource.
                  - Returns 200

        GET    Resource collection URL
                  - Obtain the collection of resources (or one page from it if the server 
                      implements pagination).
                  - Returns 200

        POST   Resource collection URL
                  - Create a new resource and add it to the collection. The server chooses the 
                      URL of the new resource and returns it in a Location header in the response.
                  - Returns 201

        PUT    Individual resource URL
                  - Modify an existing resource. Alternatively, this method can also be used to 
                      create a new resource when the client can choose the resource URL.
                  - Returns 200 or 204

        DELETE  Individual resource URL
                  - Delete a resource.
                  - Returns 200 or 204

        DELETE  Resource collection URL
                  - Delete all resources in the collection.
                  - Returns 200 or 204



- Request and Response Bodies

    - Resources are sent back and forth between clients and servers in the requests and
        responses of the body.  The 'Content-Type' header is typically used to indicate
        the format of the data in the body.


    - JSON and XML can both be used, but JSON is much more common since it is more concise.

      Note the use of fully qualified URLs for the relationships:

        {
            "self_url": "http://www.example.com/api/posts/12345",
            "title": "Writing RESTful APIs in Python",
            "author_url": "http://www.example.com/api/users/2",
            "body": "... text of the article here ...",
            "comments_url": "http://www.example.com/api/posts/12345/comments"
        }



- Versioning

    - When client applications are developed independently from the server side, we need
        to be more careful about updates.

      Web services need to be more tolerant than other web applications and must be able to
        work with old versions of their clients.  A common solution is to give web services
        a version, which is added to all URLs defined that version of the application.

        /api/v1/posts/


    - Older service versions can be deprecated and later removed once all clients have
        successfully migrated.



- Creating an API Blueprint

    - The routes associated with a RESTful API form a self-contained subset of the
        application, so it makes sense to put them in their own blueprint.

      This will be the structure of the api blueprint:

        - flasky
            - app/
                - api/
                    > __init__.py
                    > users.py
                    > posts.py
                    > comments.py
                    > authentication.py
                    > errors.py
                    > decorators.py


    - Now, we'll add the blueprint creator.

        # app/api/__init__.py

        from flask import Blueprint
        api = Blueprint('api', __name__)
        from . import authentication, posts, users, comments, errors


    - And, we'll register the new blueprint.  Note that we register the blueprint with the
        URL prefix '/api/v1'.  This eliminates the need to hardcode the version number in
        every blueprint route.

        # app/init.py

        def create_app(config_name):
            # ...
            from .api import api as api_blueprint
            app.register_blueprint(api_blueprint, url_prefix='/api/v1')
            # ...



- Error Handling

    HTTP status code    Name            Description
    -----------------------------------------------------------------------------------
    200                 OK              The request was completed successfully.

    201                 Created         The request was completed successfully and a new resource 
                                          was created as a result.

    202                 Accepted        The request was accepted for processing, but it is still in 
                                          progress and will run asynchronously.

    204                 No Content      The request was completed successfully and there is no data 
                                          to return in the response.

    400                 Bad Request     The request is invalid or inconsistent.

    401                 Unauthorized    The request does not include authentication information or 
                                          the credentials provided are invalid.

    403                 Forbidden       The authentication credentials sent with the request are 
                                          insufficient for the request.

    404                 Not Found       The resource referenced in the URL was not found.

    405                 Method Not Allowed      The method requested is not supported for the given 
                                                  resource.

    500                 Internal Server Error   An unexpected error occurred while processing the 
                                                  request.



    - The handling of status codes 403, 404, and 500 present a complication, in that these 
        errors are normally generated by Flask on it's own, and will return an HTML response.

      One way of handling this is to adapt responses based on the client's 'Accept' header.
        This is known as 'content negotiation'.  A json response is sent if JSON, but not HTML,
        is in the client's accepted formats.


        # app/main/errors.py

        @main.app_errorhandler(404)
        def page_not_found(e):
            if request.accept_mimetypes.accept_json and \
                    not request.accept_mimetypes.accept_html:
                response = jsonify({'error': 'not found'})
                response.status_code = 404
                return response
            return render_template('404.html'), 404

      We can add similar logic for the 403 and 500 errors.


    - For the other errors, the status codes are generated explicity by the web service, so they
        can be implmented inside the 'api' blueprint.

        # app/api/errors.py
        def forbidden(message):
            response = jsonify({'error': 'forbidden', 'message': message})
            response.status_code = 403
            return response

      We can add similar logic for 400 and 401 errors.



- User Authentication with Flask-HTTPAuth

- Token-Based Authentication

- Serializing Resources to and from JSON

- Implementing Resource Endpoints

- Flasky API Resources

- Pagination of Large Resource Collections

- Testing Web Services with httpie