-----------------------------------------------------------------------
|  CHAPTER 4 - WEB FORMS                                              |
-----------------------------------------------------------------------

- Web Forms

    - The Flask request object exposes all the information sent by a client in a request.  For
        POST requests containing form data, the infomation is accessed in 'request.form'.


    - Although the support provided in Flask's request object is sufficient for the handling
        of web forms, there are a number of tasks that can become tedious and repetitive, such
        as generating HTML and validation.

      The 'Flask-WTF' extension makes working with forms easier.  It is a wrapper around the
        framework-agnostic 'WTForms' package.


        # Install flask-wtf
        $ pip install flask-wtf



- Configuration

    - Flask-WTF does not need to be initialized at the application level, but it expects the
        application to have a secret key configured.  This is used to protect the contents of
        the user session against tampering.  

      It should be unique for each application, and should not be known by anyone.


    - To configure a secret key for a Flask application:

        app = Flask(__name__)
        app.config['SECRET_KEY'] = 'hard to guess string'


    - The 'app.config' dictionary is a general-purpose place to store config variables used by
        Flask, extensions, or the application itself.  

      For added security, the secret key should be stored in an environment variable in 
        production scenarios. 


    - Flask-WTF requires a secret key to be configured, becuase this key is part of the 
        mechanism used to protect all forms against CSRF attacks.  A CSRF attack occurs when a 
        malicious website sends requests to the application server on which the user is
        currently logged in.

      Flask-WTF generates security tokens for all forms and stores them in the user session,
        which is protected with a cryptographic signature generated from the secret key.



- Form Classes

    - When using Flask-WTF, each web form is represented by a class that inherits from the
        'FlaskForm' class.  The class defines the list of fields, each which can have validators
        attached.


        # hello.py

        from flask_wtf import FlaskForm
        from wtforms import StringField, SubmitField
        from wtforms.validators import DataRequired
        
        class NameForm(FlaskForm):
            name = StringField('What is your name?', validators=[DataRequired()])
            submit = SubmitField('Submit')



- List of WTForms Fields

    Field type             Description
    ------------------------------------------------------------------------------
    BooleanField           Checkbox with True and False values

    DateField              Text field that accepts a datetime.date value in a given format

    DateTimeField          Text field that accepts a datetime.datetime value in a given format

    DecimalField           Text field that accepts a decimal.Decimal value

    FileField              File upload field

    HiddenField            Hidden text field

    MultipleFileField      Multiple file upload field

    FieldList              List of fields of a given type

    FloatField             Text field that accepts a floating-point value

    FormField              Form embedded as a field in a container form

    IntegerField           Text field that accepts an integer value

    PasswordField          Password text field

    RadioField             List of radio buttons

    SelectField            Drop-down list of choices

    SelectMultipleField    Drop-down list of choices with multiple selection

    SubmitField            Form submission button

    StringField            Text field

    TextAreaField          Multiple-line text field



- List of WTForms Validators

    Validator              Description
    ------------------------------------------------------------------------------
    DataRequired           Validates that the field contains data after type conversion

    Email                  Validates an email address

    EqualTo                Compares the values of two fields; useful when requesting a password
                             to be entered twice for confirmation

    InputRequired          Validates that the field contains data before type conversion

    IPAddress              Validates an IPv4 network address

    Length                 Validates the length of the string entered

    MacAddress             Validates a MAC address

    NumberRange            Validates that the value entered is within a numeric range

    Optional               Allows empty input in the field, skipping additional validators

    Regexp                 Validates the input against a regular expression

    URL                    Validates a URL

    UUID                   Validates a UUID

    AnyOf                  Validates that the input is one of a list of possible values

    NoneOf                 Validates that the input is none of a list of possible values



- HTML Rendering of Forms

    - Form fields are callables, that when invoked from a template, render themselves to HTML.
        Our 'NameForm' instance gets rendered as:

        <form method="POST">
            {{ form.hidden_tag() }}
            {{ form.name.label }} {{ form.name() }}
            {{ form.submit() }}
        </form>

      Note that the 'hidden_tag' is used by Flask-WTF to implement CSRF protection.


    - We can give the fields 'id' or 'class' attributes if we want to define CSS styles for them.

        <form method="POST">
            {{ form.hidden_tag() }}
            {{ form.name.label }} {{ form.name(id='my-text-field') }}
            {{ form.submit() }}
        </form>


    - The easiest way to get decent looking forms is to just use the Bootstrap defaults.  The
        Flask-Bootstrap extension has a high-level helper function that renders an entire Flask-WTF
        form using Bootstrap's predefined form styles.

      To render the entire form:

        {% import "bootstrap/wtf.html" as wtf %}
        {{ wtf.quick_form(form) }}


    - Here is the complete template:

        # templates/index.html

        {% extends "base.html" %}
        {% import "bootstrap/wtf.html" as wtf %}
        
        {% block title %}Flasky{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>Hello, {% if name %}{{ name }}{% else %}Stranger{% endif %}!</h1>
        </div>
        {{ wtf.quick_form(form) }}
        {% endblock %}



- Form Handling in View Functions

    - Now, we can update the view method to handle the form:

        @app.route('/', methods=['GET', 'POST'])
        def index():
            name = None
            form = NameForm()
            if form.validate_on_submit():
                name = form.name.data
                form.name.data = ''
            return render_template('index.html', form=form, name=name)



- Redirects and User Sessions

    - We have a slight usability problem with our form.  If we enter our name, and submit it,
        then click the refresh button on our browser, we'll get a warning asking us to confirm
        whether we want to submit the form again.

      This happens because browsers repeat the last request they sent when they are asked to
        refresh a page.  Since many user don't understand this behavior, it is considered good
        practice to never leave a POST request as the last request sent by the browser.


    - To fix this, we can respond to POST requests with a redirect instead of a normal response.
        It may take a few more milliseconds to load, but other than that, the user won't see
        any difference.  Since the last request is now a GET, the refresh will work as expected.

      This is known as the 'Post/Redirect/Get' pattern.


    - However, this approach has another problem, in that the data entered into the form is now
        forgotten.  The trick to get around this is to 'remember' the value from the form by 
        storing it in the user session.  The user session is accessed using the 'session'
        dictionary.

      By default, user sessions are stored in client-side cookies that are cryptographically 
        signed using the configured secret key.  Any tampering with the cookie content renders
        the signature invalid, thus invalidating the session.


    - Here is the updated view, that new implements redirects and user sessions.

        from flask import Flask, render_template, session, redirect, url_for

        @app.route('/', methods=['GET', 'POST'])
        def index():
            form = NameForm()
            if form.validate_on_submit():
                session['name'] = form.name.data
                return redirect(url_for('index'))
            return render_template('index.html', form=form, name=session.get('name'))


      Note that session.get will return None if the key is missing instead of throwing an 
        exception.



- Message Flashing

    - Sometimes it is useful to give the user a status after a request is completed.  This
        might be a confirmation message, an error, or a warning.

      For instance, the user could receive a warning if their username or password was entered
        correctly.


    - Flask includes this functionality as a core feature.

        from flask import Flask, render_template, session, redirect, url_for, flash

        @app.route('/', methods=['GET', 'POST'])
        def index():
            form = NameForm()
            if form.validate_on_submit():
                old_name = session.get('name')
                if old_name is not None and old_name != form.name.data:
                    flash('Looks like you have changed your name!')
                session['name'] = form.name.data
                return redirect(url_for('index'))
            return render_template('index.html', form = form, name=session.get('name'))


    - Now, we need to add the flash messages to our template.  The best place to render them
        is in the base template, since it will enable them in all pages.

      The Flask 'get_flashed_messages()' method is used to retrieve messages and render them.

        # templates/base.html

        {% block content %}
        <div class="container">
            {% for message in get_flashed_messages() %}
            <div class="alert alert-warning">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                {{ message }}
            </div>
            {% endfor %}
        
            {% block page_content %}{% endblock %}
        </div>
        {% endblock %}


    - Note that flash messages are used once and discarded, so they will not be returned the
        next time the function is called.