-----------------------------------------------------------------------
|  CHAPTER 15 - TESTING                                               |
-----------------------------------------------------------------------

- Obtaining Code Coverage Reports

    - The 'coverage' tool is Python's standard tool for measuring code coverage.

        $ pip install coverage


    - The 'coverage' tool comes as a command-line script that can launch any Python
        application with code coverage enabled, but it also provides more convenient
        access to start the coverage engine programatically.

        # flasky.py
        ------------------------------------------
        import os, sys, click

        COV = None
        if os.environ.get('FLASK_COVERAGE'):
            import coverage
            COV = coverage.coverage(branch=True, include='app/*')
            COV.start()
        
        # ...
        
        @app.cli.command()
        @click.option('--coverage/--no-coverage', default=False,
                      help='Run tests under code coverage.')
        def test(coverage):
            """Run the unit tests."""
            if coverage and not os.environ.get('FLASK_COVERAGE'):
                os.environ['FLASK_COVERAGE'] = '1'
                os.execvp(sys.executable, [sys.executable] + sys.argv)
            import unittest
            tests = unittest.TestLoader().discover('tests')
            unittest.TextTestRunner(verbosity=2).run(tests)
            if COV:
                COV.stop()
                COV.save()
                print('Coverage Summary:')
                COV.report()
                basedir = os.path.abspath(os.path.dirname(__file__))
                covdir = os.path.join(basedir, 'tmp/coverage')
                COV.html_report(directory=covdir)
                print('HTML version: file://%s/index.html' % covdir)
                COV.erase()



- The Flask Test Client

- Testing Web Applications

- Testing Web Services

- End-to-End Testing with Selenium

- Is it Worth it?