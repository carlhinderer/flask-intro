-----------------------------------------------------------------------
|  CHAPTER 2 - BASIC APPLICATION STRUCTURE                            |
-----------------------------------------------------------------------

- Initialization

    - All Flask applications must create an 'application instance'.  The web server 
        passes all requests it receives from clients to this object for handling, using a
        protocol called WSGI.  


    - The application instance is an object of class 'Flask':

        from flask import Flask
        app = Flask(__name__)



- Routes and View Functions

    - The most convenient way to define a route in a Flask application is through the
        'app.route' decorator exposed by the application interface.  

        @app.route('/')
        def index():
            return '<h1>Hello World!</h1>'


    - We can also call a separate method to register a route instead of using the 
        decorator.

        def index():
            return '<h1>Hello World!'</h1>

        app.add_url_rule('/', 'index', index)


    - We can also use parameters from routes.

        @app.route('/user/<name>')
        def user(name):
            return '<h1>Hello, {}!</h1>'.format(name)


    - By default, the parameters are strings, but we can accept types of 'int', 'float', and
        'path' as well.

        @app.route('/user/<int:id>')



- A Complete Application

    - Here, we create the simplest possible Flask application:

        from flask import Flask
        app = Flask(__name__)

        @app.route('/')
        def index():
            return '<h1>Hello World!</h1>'



- Development Web Server

    - Flask applications include a development web server that can be started with the
        'flask run' command.

        # The 'flask run' command looks for the application to run in the FLASK_APP env var
        $ export FLASK_APP=hello.py

        # Start the development server
        $ flask run


    - Note that older versions of Flask did not have the 'flask' command, and would require
        the 'app.run()' method to be used instead.

        if __name__ == '__main__':
            app.run()



- Dynamic Routes

    - Now, let's add our dynamic route to 'hello.py'.

        @app.route('/user/<name>')
        def user(name):
            return '<h1>Hello, {}!</h1>'.format(name)



- Debug Mode

    - Flask applications can optionally be extended to run in 'debug mode', which enables
        the very convenient 'reloader' and 'debugger' options.

        # Run in debug mode
        $ export FLASK_APP=hello.py
        $ export FLASK_DEBUG=1
        $ flask run


    - Debug mode should never be used in production, since it allows remote execution and opens
        a bunch of security problems.  To ensure this doesn't happen accidentally, the debugger
        must be activated with a pin.



- Command-Line Options

    - The 'flask' command supports a number of options.

        # Get general help
        $ flask --help

        # Get help for a specific command
        $ flask run --help


        # Start a python shell session in the context of the application
        $ flask shell


        # Make the web server listen for connections on the public network interface
        $ flask run --host 0.0.0.0

        # Other useful options for 'flask run'
        --reload
        --no-reload
        --debugger 
        --no-debugger



- Application and Request Contexts

    - When Flask receives a request from a client, it needs to make a few objects
        available to the view function that will handle it.  

      For instance, the 'request' object encapsulates the HTTP request sent by the client.

        from flask import request

        @app.route('/')
        def index():
            user_agent = request.headers.get('User-Agent')
            return '<p>Your browser is {}</p>'.format(user_agent)


    - To avoid having to pass the request object as a parameter in every view method, Flask
        uses contexts to temporarily make certain objects globally accessible.

      Note that even though 'request' looks like a global variable, it cannot really be, since
        several threads on the server can be handling different requets.  Contexts can make
        certain variables globally accessible to a thread without interfering with other threads.


    - There are 2 contexts in Flask: the 'application context' and 'request context'.


    - Here are the Flask context globals:

        Variable name       Context                 Description
        ----------------------------------------------------------------------------------
        current_app         Application context     The application instance for the active 
                                                      application.

        g                   Application context     An object that the application can use for 
                                                      temporary storage during the handling of a 
                                                      request. This variable is reset with each request.

        request             Request context         The request object, which encapsulates the contents 
                                                      of an HTTP request sent by the client.

        session             Request context         The user session, a dictionary that the application 
                                                      can use to store values that are “remembered” 
                                                      between requests.


    - Flash pushes the application and request contexts before dispatching a request to the
        application, and removes them after the request is handled.  When the application context
        is pushed, the 'current_app' and 'g' variables become available to the thread.  When
        the request context is pushed, the 'request' and 'session' variables become available
        as well.


    - Here is an example of using the application context:

        >>> from hello import app
        >>> from flask import current_app

        # Fails since there is no active application context
        >>> current_app.name
        RuntimeError: working outside of application context

        # Valid once the application context is pushed
        >>> app_ctx = app.app_context()
        >>> app_ctx.push()
        >>> current_app.name
        'hello'
        >>> app_ctx.pop()




- Request Dispatching

    - We can programatically view the application's entire URL map.

        >>> from hello import app
        >>> app.url_map



- The Request Object

    - Here is a list of commonly used attributes and methods of the 'request' object.

        Attribute or Method     Description
        ----------------------------------------------------------------------------
        form                    A dictionary with all the form fields submitted with the request.

        args                    A dictionary with all the arguments passed in the query string 
                                  of the URL.

        values                  A dictionary that combines the values in form and args.

        cookies                 A dictionary with all the cookies included in the request.

        headers                 A dictionary with all the HTTP headers included in the request.

        files                   A dictionary with all the file uploads included with the request.

        get_data()              Returns the buffered data from the request body.

        get_json()              Returns a Python dictionary with the parsed JSON included in the 
                                  body of the request.

        blueprint               The name of the Flask blueprint that is handling the request.

        endpoint                The name of the Flask endpoint that is handling the request. Flask 
                                  uses the name of the view function as the endpoint name for a route.

        method                  The HTTP request method, such as GET or POST.

        scheme                  The URL scheme (http or https).

        is_secure()             Returns True if the request came through a secure (HTTPS) connection.

        host                    The host defined in the request, including the port number if given 
                                  by the client.

        path                    The path portion of the URL.

        query_string            The query string portion of the URL, as a raw binary value.

        full_path               The path and query string portions of the URL.

        url                     The complete URL requested by the client.

        base_url                Same as url, but without the query string component.

        remote_addr             The IP address of the client.

        environ                 The raw WSGI environment dictionary for the request.



- Request Hooks

    - Sometimes, we want to execute some code before or after each request is processed.
        For instance, we may want to create a DB connection or authenticate the user.
        We can do this using request hooks, which are implemented as decorators.


    - There are 4 hooks supported by Flask:

        before_request

          Registers a function to run before each request.

        before_first_request

          Registers a function to run only before the first request is handled. This can 
            be a convenient way to add server initialization tasks.

        after_request

          Registers a function to run after each request, but only if no unhandled 
            exceptions occurred.

        teardown_request

          Registers a function to run after each request, even if unhandled exceptions 
            occurred.



- Responses

    - A view function returns the response to a request.  By default, the status code is
        set to 200.  To send a different response code:

        @app.route('/')
        def index():
            return '<h1>Bad Request</h1>', 400

      Responses can also return a 3rd argument, a dictionary of headers that are added to 
        the HTTP response.


    - Instead of returning values as a header, we can also return a response object instead.
        We build a response object using the 'make_response' method, which takes the same
        1, 2, or 3 arguments that can be returned in a tuple.

        from flask import make_response

        @app.route('/')
        def index():
            response = make_response('<h1>This document carries a cookie!</h1>')
            response.set_cookie('answer', '42')
            return response


    - Here are some commonly used attributes and methods of the 'response' object.

        Attribute or Method     Description
        ------------------------------------------------------------------------------------
        status_code             The numeric HTTP status code

        headers                 A dictionary-like object with all the headers that will be sent 
                                  with the response

        set_cookie()            Adds a cookie to the response

        delete_cookie()         Removes a cookie

        content_length          The length of the response body

        content_type            The media type of the response body

        set_data()              Sets the response body as a string or bytes value

        get_data()              Gets the response body



- Redirects

    - A redirect is a special response that typically gives a 302 reponse code and a URL
        to navigate to.

        from flask import redirect

        @app.route('/')
        def index():
            return redirect('http://www.example.com')


    - The 'abort' method is used for error handling.

        from flask import abort

        @app.route('/user/<id>')
        def get_user(id):
            if not user:
                abort(404)
            return '<h1>Hello, {}</h1>'.format(user.name)