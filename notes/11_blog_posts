-----------------------------------------------------------------------
|  CHAPTER 11 - BLOG POSTS                                            |
-----------------------------------------------------------------------

- Blog Post Submission

    - We'll create a new model to represent blog posts.

        # app/models.py
        ------------------------------------------
        class Post(db.Model):
            __tablename__ = 'posts'
            id = db.Column(db.Integer, primary_key=True)
            body = db.Column(db.Text)
            timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
            author_id = db.Column(db.Integer, db.ForeignKey('users.id'))
        
        class User(UserMixin, db.Model):
            # ...
            posts = db.relationship('Post', backref='author', lazy='dynamic')


    - The main page of the application will show users a form to write a blog post.  Here is 
        the form for blog posts:

        # app/forms.py
        ------------------------------------------
        class PostForm(FlaskForm):
            body = TextAreaField("What's on your mind?", validators=[DataRequired()])
            submit = SubmitField('Submit')



- Blog Post Display

    - Now, we'll update the 'index()' view method to handle the new form and pass a list of
        old blog posts to the template.

        # app/main/views.py
        ------------------------------------------
        @main.route('/', methods=['GET', 'POST'])
        def index():
            form = PostForm()
            if current_user.can(Permission.WRITE) and form.validate_on_submit():
                post = Post(body=form.body.data,
                            author=current_user._get_current_object())
                db.session.add(post)
                db.session.commit()
                return redirect(url_for('.index'))
            posts = Post.query.order_by(Post.timestamp.desc()).all()
            return render_template('index.html', form=form, posts=posts)


    - Here is the new home page template, now with blog posts:

        # app/templates/index.html
        ------------------------------------------
        {% extends "base.html" %}
        {% import "bootstrap/wtf.html" as wtf %}
        ...
        <div>
            {% if current_user.can(Permission.WRITE) %}
            {{ wtf.quick_form(form) }}
            {% endif %}
        </div>
        <ul class="posts">
            {% for post in posts %}
            <li class="post">
                <div class="profile-thumbnail">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        <img class="img-rounded profile-thumbnail"
                            src="{{ post.author.gravatar(size=40) }}">
                    </a>
                </div>
                <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
                <div class="post-author">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        {{ post.author.username }}
                    </a>
                </div>
                <div class="post-body">{{ post.body }}</div>
            </li>
            {% endfor %}
        </ul>



- Blog Posts on Profile Pages

    - The user profile page can be improved by showing a list of blog posts authored by
        the user.

        # app/main/views.py
        ------------------------------------------
        @main.route('/user/<username>')
        def user(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                abort(404)
            posts = user.posts.order_by(Post.timestamp.desc()).all()
            return render_template('user.html', user=user, posts=posts)
        

    - The 'user.html' template needs to have the same <ul> tree of posts that 'index.html' 
        uses.  To avoid duplicating the code, we can create a snippet that can be used by 
        both files.  By convention, we name these templates starting with an underscore.

        # app/templates/user.html
        ------------------------------------------
        ...
        <h3>Posts by {{ user.username }}</h3>
        {% include '_posts.html' %}
        ...

        # app/templates/index.html
        {% include '_posts.html' %}


    - Here is the new snippet template:

        # app/templates/_posts.html
        ------------------------------------------
        <ul class="posts">
            {% for post in posts %}
            <li class="post">
                <div class="post-thumbnail">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        <img class="img-rounded profile-thumbnail" src="{{ post.author.gravatar(size=40) }}">
                    </a>
                </div>
                <div class="post-content">
                    <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
                    <div class="post-author">
                        <a href="{{ url_for('.user', username=post.author.username) }}">
                        {{ post.author.username }}
                        </a>
                    </div>
                    <div class="post-body">{{ post.body }}</div>
                </div>
            </li>
            {% endfor %}
        </ul>



- Paginating Long Blog Post Lists

    - As the site grows, it will become slow and impractical to show the complete list of
        posts.  The solution is to paginate the data and render it in chunks.



- Creating Fake Blog Post Data

    - To be able to work with multiple pages of posts, we'll need a test database with a
        large amount of data.  We'll use the 'faker' package to add fake users and posts.

      We'll split our package lists into 'dev' and 'prod', with shared requirements in the
        'common' file.


        # app/requirements/common.txt
        alembic==1.4.2
        ...

        # app/requirements/dev.txt
        -r common.txt
        faker==4.1.1

        # app/requirements/prod.txt
        -r common.txt


    - Now, we'll add the code to fake the users and posts:

        # app/fake.py
        ------------------------------------------
        from random import randint
        from sqlalchemy.exc import IntegrityError
        from faker import Faker
        from . import db
        from .models import User, Post
        
        def users(count=100):
            fake = Faker()
            i = 0
            while i < count:
                u = User(email=fake.email(),
                         username=fake.user_name(),
                         password='password',
                         confirmed=True,
                         name=fake.name(),
                         location=fake.city(),
                         about_me=fake.text(),
                         member_since=fake.past_date())
                db.session.add(u)
                try:
                    db.session.commit()
                    i += 1
                except IntegrityError:
                    db.session.rollback()
        
        def posts(count=100):
            fake = Faker()
            user_count = User.query.count()
            for i in range(count):
                u = User.query.offset(randint(0, user_count - 1)).first()
                p = Post(body=fake.text(),
                         timestamp=fake.past_date(),
                         author=u)
                db.session.add(p)
            db.session.commit()


    - Now, we can run these functions in the shell.

        >>> from app import fake
        >>> fake.users(100)
        >>> fake.posts(100)



- Rendering Pagination Links in Pages

    - Here are the changes to the home page view method we will make to support
        pagination.


        # app/main/views.py
        ------------------------------------------
        @main.route('/', methods=['GET', 'POST'])
        def index():
            # ...
            page = request.args.get('page', 1, type=int)
            pagination = Post.query.order_by(Post.timestamp.desc()).paginate(
                page, per_page=current_app.config['FLASKY_POSTS_PER_PAGE'],
                error_out=False)
            posts = pagination.items
            return render_template('index.html', form=form, posts=posts,
                                   pagination=pagination)


    - With this change, the home page will show a limited number of posts.  To see the second
        page of results, use:

        http://localhost/?page=2



- The Pagination Object

    - The return value of 'paginate()' is an object of class 'Pagination', a class defined by
        Flask-SQLAlchemy.  This objects contains properties useful for generating links in a
        template, so it is passed to the template as an argument.


    - Here are the pagination object's attributes:

        Attribute       Description
        --------------------------------------------------------------------------
        items           The records in the current page

        query           The source query that was paginated

        page            The current page number

        prev_num        The previous page number

        next_num        The next page number

        has_next        True if there is a next page

        has_prev        True if there is a previous page

        pages           The total number of pages for the query

        per_page        The number of items per page

        total           The total number of items returned by the query


        Method          Description
        --------------------------------------------------------------------------
        iter_pages(left_edge=2, left_current=2, right_current=5, right_edge=2)
    
           An iterator that returns the sequence of page numbers to display in a pagination 
             widget. 

           The list will have left_edge pages on the left side, left_current pages to the left 
             of the current page, right_current pages to the right of the current page, and 
             right_edge pages on the right side. 

           For example, for page 50 of 100 this iterator configured with default values will 
             return the following pages: 1, 2, None, 48, 49, 50, 51, 52, 53, 54, 55, None, 99, 
             100. A None value in the sequence indicates a gap in the sequence of pages.


        prev()          A pagination object for the previous page.

        next()          A pagination object for the next page.



- Adding a Pagination Widget

    - Using this pagination object and Bootstrap's pagination CSS classes, it is quite easy to
        build a pagination footer.


        # app/templates/_macros.html
        ------------------------------------------
        {% macro pagination_widget(pagination, endpoint) %}
        <ul class="pagination">
            <li{% if not pagination.has_prev %} class="disabled"{% endif %}>
                <a href="{% if pagination.has_prev %}{{ url_for(endpoint,
                    page = pagination.page - 1, **kwargs) }}{% else %}#{% endif %}">
                    &laquo;
                </a>
            </li>
            {% for p in pagination.iter_pages() %}
                {% if p %}
                    {% if p == pagination.page %}
                    <li class="active">
                        <a href="{{ url_for(endpoint, page = p, **kwargs) }}">{{ p }}</a>
                    </li>
                    {% else %}
                    <li>
                        <a href="{{ url_for(endpoint, page = p, **kwargs) }}">{{ p }}</a>
                    </li>
                    {% endif %}
                {% else %}
                <li class="disabled"><a href="#">&hellip;</a></li>
                {% endif %}
            {% endfor %}
            <li{% if not pagination.has_next %} class="disabled"{% endif %}>
                <a href="{% if pagination.has_next %}{{ url_for(endpoint,
                    page = pagination.page + 1, **kwargs) }}{% else %}#{% endif %}">
                    &raquo;
                </a>
            </li>
        </ul>
        {% endmacro %}


    - The macro creates a Bootstrap pagination element, which is a styled unordered list.
        It creates:

          1. Previous link (disabled if its 1st page)
          2. Links to pages returned by 'iter_pages()' iterator
          3. Next page (disabled if its last page)


    - We can add the pagination widget to our home page:

        # app/templates/index.html
        ------------------------------------------
        ...
        {% include '_posts.html' %}

        {% if pagination %}
        <div class="pagination">
            {{ macros.pagination_widget(pagination, '.index') }}
        </div>
        {% endif %}


    - Finally, we'll update the user page to do the same thing:

        1. Update the /user view method in app/main/views.py
        2. Update the user template app/templates/user.html



- Rich-Text Posts with Markdown and Flask-PageDown

    - We'll install a few new packages:

        - PageDown, a client-side Markdown-to-HTML converter implemented in JavaScript

        - Flask-PageDown, a PageDown wrapper for Flask that integrates PageDown with 
            Flask-WTF forms

        - Markdown, a server-side Markdown-to-HTML converter implemented in Python

        - Bleach, an HTML sanitizer implemented in Python


        # Install required packages
        $ pip install flask-pagedown markdown bleach



- Using Flask-PageDown

    - The 'Flask-PageDown' extension defines a 'PageDownField' class that has the same
        interface as the WTForms 'TextAreaField'.  First, we'll initialize the extension.

        # app/__init__.py
        ------------------------------------------
        from flask_pagedown import PageDown
        pagedown = PageDown()

        def create_app(config_name):
            # ...
            pagedown.init_app(app)
            # ...


    - Next, we'll convert the text area control in our home page to a Markdown rich-text
        editor by changing the 'body' field.

        # app/main/forms.py
        ------------------------------------------
        from flask_pagedown.fields import PageDownField

        class PostForm(FlaskForm):
            body = PageDownField("What's on your mind?", validators=[Required()])
            submit = SubmitField('Submit')


    - And, add the template macro provided by 'Flask-PageDown'.

        # app/templates/index.html
        ------------------------------------------
        {% block scripts %}
        {{ super() }}
        {{ pagedown.include_pagedown() }}
        {% endblock %}



- Handling Rich Text on the Server

    - When the form is submitted, only the raw Markdown text is sent with the POST
        request.  The preview of the marked up text is not sent for security reasons,
        since an attacker could easily construct HTML sequences and submit them.

      So, to avoid any risks, we store the raw text and convert it to Markdown on the
        server side using the 'Markdown' Python converter.  The resulting HTML is
        sanitized usin the 'Bleach' package to ensure only a short list of HTML tags
        is allowed.


    - We could render the markup in templates, but for efficiency we'll cache the markdown
        for each post.

        # app/models.py
        ------------------------------------------
        from markdown import markdown
        import bleach
        
        class Post(db.Model):
            # ...
            body_html = db.Column(db.Text)
            # ...

            @staticmethod
            def on_changed_body(target, value, oldvalue, initiator):
                allowed_tags = ['a', 'abbr', 'acronym', 'b', 'blockquote', 'code',
                                'em', 'i', 'li', 'ol', 'pre', 'strong', 'ul',
                                'h1', 'h2', 'h3', 'p']
                target.body_html = bleach.linkify(bleach.clean(
                    markdown(value, output_format='html'),
                    tags=allowed_tags, strip=True))
        
        db.event.listen(Post.body, 'set', Post.on_changed_body)


    - And, we update the posts template.

        # app/templates/_posts.html
        ------------------------------------------
        <div class="post-body">
            {% if post.body_html %}
                {{ post.body_html | safe }}
            {% else %}
                {{ post.body }}
            {% endif %}
        </div>



- Permanent Links to Blog Posts

    - So that posts can be shared, each post will be assigned a unique URL that 
        references it.  Here is the route for individual posts:

        # app/main/views.py
        ------------------------------------------
        @main.route('/post/<int:id>')
        def post(id):
            post = Post.query.get_or_404(id)
            return render_template('post.html', posts=[post])


    - And we'll also add a link to the permalink to the _posts template.

        # app/templates/_posts.html
        ------------------------------------------
        <div class="post-content">
            ...
            <div class="post-footer">
                <a href="{{ url_for('.post', id=post.id) }}">
                    <span class="label label-default">Permalink</span>
                </a>
            </div>
        </div>


    - And, we'll need a new template for the posts themselves.

        # app/templates/post.html
        ------------------------------------------
        {% extends "base.html" %}
        
        {% block title %}Flasky - Post{% endblock %}
        
        {% block page_content %}
        {% include '_posts.html' %}
        {% endblock %}



- Blog Post Editor

    - The last feature we'll add for blog posts is the ability to allow users to edit 
        their own posts.  This editor will live in a stand-alone template.

        # app/templates/edit_post.html
        ------------------------------------------
        {% extends "base.html" %}
        {% import "bootstrap/wtf.html" as wtf %}
        
        {% block title %}Flasky - Edit Post{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>Edit Post</h1>
        </div>
        <div>
            {{ wtf.quick_form(form) }}
        </div>
        {% endblock %}
        
        {% block scripts %}
        {{ super() }}
        {{ pagedown.include_pagedown() }}
        {% endblock %}


    - Here is the route to support the template:

        # app/main/views.py
        ------------------------------------------
        @main.route('/edit/<int:id>', methods=['GET', 'POST'])
        @login_required
        def edit(id):
            post = Post.query.get_or_404(id)
            if current_user != post.author and \
                    not current_user.can(Permission.ADMIN):
                abort(403)
            form = PostForm()
            if form.validate_on_submit():
                post.body = form.body.data
                db.session.add(post)
                db.session.commit()
                flash('The post has been updated.')
                return redirect(url_for('.post', id=post.id))
            form.body.data = post.body
            return render_template('edit_post.html', form=form)


    - And, finally, we need to add the edit links to each individual post:

        # app/templates/_posts.html
        ------------------------------------------
        <div class="post-footer">
                ...
            {% if current_user == post.author %}
            <a href="{{ url_for('.edit', id=post.id) }}">
                <span class="label label-primary">Edit</span>
            </a>
            {% elif current_user.is_administrator() %}
            <a href="{{ url_for('.edit', id=post.id) }}">
                <span class="label label-danger">Edit [Admin]</span>
            </a>
            {% endif %}
        </div>