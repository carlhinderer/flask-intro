-----------------------------------------------------------------------
|  CHAPTER 11 - BLOG POSTS                                            |
-----------------------------------------------------------------------

- Blog Post Submission

    - We'll create a new model to represent blog posts.

        # app/models.py
    
        class Post(db.Model):
            __tablename__ = 'posts'
            id = db.Column(db.Integer, primary_key=True)
            body = db.Column(db.Text)
            timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
            author_id = db.Column(db.Integer, db.ForeignKey('users.id'))
        
        class User(UserMixin, db.Model):
            # ...
            posts = db.relationship('Post', backref='author', lazy='dynamic')


    - The main page of the application will show users a form to write a blog post.  Here is 
        the form for blog posts:

        # app/forms.py

        class PostForm(FlaskForm):
            body = TextAreaField("What's on your mind?", validators=[DataRequired()])
            submit = SubmitField('Submit')



- Blog Post Display

    - Now, we'll update the 'index()' view method to handle the new form and pass a list of
        old blog posts to the template.

        # app/main/views.py

        @main.route('/', methods=['GET', 'POST'])
        def index():
            form = PostForm()
            if current_user.can(Permission.WRITE) and form.validate_on_submit():
                post = Post(body=form.body.data,
                            author=current_user._get_current_object())
                db.session.add(post)
                db.session.commit()
                return redirect(url_for('.index'))
            posts = Post.query.order_by(Post.timestamp.desc()).all()
            return render_template('index.html', form=form, posts=posts)


    - Here is the new home page template, now with blog posts:

        # app/templates/index.html

        {% extends "base.html" %}
        {% import "bootstrap/wtf.html" as wtf %}
        ...
        <div>
            {% if current_user.can(Permission.WRITE) %}
            {{ wtf.quick_form(form) }}
            {% endif %}
        </div>
        <ul class="posts">
            {% for post in posts %}
            <li class="post">
                <div class="profile-thumbnail">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        <img class="img-rounded profile-thumbnail"
                            src="{{ post.author.gravatar(size=40) }}">
                    </a>
                </div>
                <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
                <div class="post-author">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        {{ post.author.username }}
                    </a>
                </div>
                <div class="post-body">{{ post.body }}</div>
            </li>
            {% endfor %}
        </ul>



- Blog Posts on Profile Pages

    - The user profile page can be improved by showing a list of blog posts authored by
        the user.

        # app/main/views.py

        @main.route('/user/<username>')
        def user(username):
            user = User.query.filter_by(username=username).first()
            if user is None:
                abort(404)
            posts = user.posts.order_by(Post.timestamp.desc()).all()
            return render_template('user.html', user=user, posts=posts)
        

    - The 'user.html' template needs to have the same <ul> tree of posts that 'index.html' 
        uses.  To avoid duplicating the code, we can create a snippet that can be used by 
        both files.  By convention, we name these templates starting with an underscore.

        # app/templates/user.html
        ...
        <h3>Posts by {{ user.username }}</h3>
        {% include '_posts.html' %}
        ...

        # app/templates/index.html
        {% include '_posts.html' %}


    - Here is the new snippet template:

        # app/templates/_posts.html

        <ul class="posts">
            {% for post in posts %}
            <li class="post">
                <div class="post-thumbnail">
                    <a href="{{ url_for('.user', username=post.author.username) }}">
                        <img class="img-rounded profile-thumbnail" src="{{ post.author.gravatar(size=40) }}">
                    </a>
                </div>
                <div class="post-content">
                    <div class="post-date">{{ moment(post.timestamp).fromNow() }}</div>
                    <div class="post-author">
                        <a href="{{ url_for('.user', username=post.author.username) }}">
                        {{ post.author.username }}
                        </a>
                    </div>
                    <div class="post-body">{{ post.body }}</div>
                </div>
            </li>
            {% endfor %}
        </ul>



- Paginating Long Blog Post Lists

    - 


    
- Creating Fake Blog Post Data

- Rendering Pagination Links in Pages

- Adding a Pagination Widget

- Rich-Text Posts with Markdown and Flask-PageDown

- Using Flask-PageDown

- Handling Rich Text on the Server

- Permanent Links to Blog Posts

- Blog Post Editor